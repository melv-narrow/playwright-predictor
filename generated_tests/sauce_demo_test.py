"""
Test suite for Sauce Demo e-commerce website

Generated by AI Test Generator
Timestamp: 2025-01-02 18:52:13
"""

import pytest
from playwright.async_api import Page, expect
import re

pytestmark = pytest.mark.asyncio

@pytest.fixture
def test_user():
    """Standard test user credentials"""
    return {
        "username": "standard_user",
        "password": "secret_sauce"
    }

@pytest.fixture
def locked_user():
    """Locked out user credentials"""
    return {
        "username": "locked_out_user",
        "password": "secret_sauce"
    }

@pytest.fixture
def problem_user():
    """Problem user credentials"""
    return {
        "username": "problem_user",
        "password": "secret_sauce"
    }

@pytest.fixture
def performance_user():
    """Performance glitch user credentials"""
    return {
        "username": "performance_glitch_user",
        "password": "secret_sauce"
    }

@pytest.fixture
def product_data():
    """Test product data"""
    return {
        "backpack": {
            "name": "Sauce Labs Backpack",
            "price": "$29.99"
        },
        "bike_light": {
            "name": "Sauce Labs Bike Light",
            "price": "$9.99"
        }
    }

async def test_login_success(page: Page, test_user):
    """Test successful login with valid credentials"""
    # Navigate to login page
    await page.goto("https://www.saucedemo.com/")
    
    # Fill login form
    await page.fill("#user-name", test_user["username"])
    await page.fill("#password", test_user["password"])
    
    # Click login button
    await page.click("#login-button")
    
    # Verify successful login
    await expect(page.locator(".inventory_list")).to_be_visible()
    await expect(page.locator(".shopping_cart_link")).to_be_visible()
    
    # Save screenshot
    await page.screenshot(path="test-results/login_success.png")

async def test_login_failure(page: Page):
    """Test login failure with invalid credentials"""
    # Navigate to login page
    await page.goto("https://www.saucedemo.com/")
    
    # Fill login form with invalid credentials
    await page.fill("#user-name", "invalid_user")
    await page.fill("#password", "invalid_password")
    
    # Click login button
    await page.click("#login-button")
    
    # Verify error message
    error = page.locator("[data-test='error']")
    await expect(error).to_be_visible()
    await expect(error).to_contain_text("Username and password do not match")
    
    # Save screenshot
    await page.screenshot(path="test-results/login_failure.png")

async def test_add_to_cart(page: Page, test_user, product_data):
    """Test adding products to cart"""
    # Login first
    await page.goto("https://www.saucedemo.com/")
    await page.fill("#user-name", test_user["username"])
    await page.fill("#password", test_user["password"])
    await page.click("#login-button")
    
    # Add backpack to cart
    await page.click("#add-to-cart-sauce-labs-backpack")
    
    # Verify cart badge
    cart_badge = page.locator(".shopping_cart_badge")
    await expect(cart_badge).to_be_visible()
    await expect(cart_badge).to_have_text("1")
    
    # Add bike light to cart
    await page.click("#add-to-cart-sauce-labs-bike-light")
    await expect(cart_badge).to_have_text("2")
    
    # Save screenshot
    await page.screenshot(path="test-results/add_to_cart_success.png")

async def test_remove_from_cart(page: Page, test_user):
    """Test removing products from cart"""
    # Login and add item to cart first
    await page.goto("https://www.saucedemo.com/")
    await page.fill("#user-name", test_user["username"])
    await page.fill("#password", test_user["password"])
    await page.click("#login-button")
    await page.click("#add-to-cart-sauce-labs-backpack")
    
    # Remove item from cart
    await page.click("#remove-sauce-labs-backpack")
    
    # Verify cart is empty
    cart_badge = page.locator(".shopping_cart_badge")
    await expect(cart_badge).not_to_be_visible()
    
    # Save screenshot
    await page.screenshot(path="test-results/remove_from_cart_success.png")

async def test_checkout_process(page: Page, test_user):
    """Test complete checkout process"""
    # Login and add item to cart
    await page.goto("https://www.saucedemo.com/")
    await page.fill("#user-name", test_user["username"])
    await page.fill("#password", test_user["password"])
    await page.click("#login-button")
    await page.click("#add-to-cart-sauce-labs-backpack")
    
    # Go to cart
    await page.click(".shopping_cart_link")
    
    # Start checkout
    await page.click("#checkout")
    
    # Fill checkout information
    await page.fill("#first-name", "Test")
    await page.fill("#last-name", "User")
    await page.fill("#postal-code", "12345")
    
    # Continue to overview
    await page.click("#continue")
    
    # Verify checkout overview
    await expect(page.locator(".summary_info")).to_be_visible()
    
    # Complete checkout
    await page.click("#finish")
    
    # Verify success message
    await expect(page.locator(".complete-header")).to_be_visible()
    await expect(page.locator(".complete-header")).to_have_text("Thank you for your order!")
    
    # Save screenshot
    await page.screenshot(path="test-results/checkout_success.png")

async def test_product_sort(page: Page, test_user):
    """Test product sorting functionality"""
    # Login first
    await page.goto("https://www.saucedemo.com/")
    await page.fill("#user-name", test_user["username"])
    await page.fill("#password", test_user["password"])
    await page.click("#login-button")
    
    # Sort by price high to low
    await page.select_option(".product_sort_container", "hilo")
    
    # Verify first item is highest priced
    first_price = page.locator(".inventory_item_price").first
    await expect(first_price).to_contain_text("$49.99")
    
    # Sort by price low to high
    await page.select_option(".product_sort_container", "lohi")
    
    # Verify first item is lowest priced
    first_price = page.locator(".inventory_item_price").first
    await expect(first_price).to_contain_text("$7.99")
    
    # Save screenshot
    await page.screenshot(path="test-results/sort_success.png")

async def test_product_details(page: Page, test_user):
    """Test viewing product details"""
    # Login first
    await page.goto("https://www.saucedemo.com/")
    await page.fill("#user-name", test_user["username"])
    await page.fill("#password", test_user["password"])
    await page.click("#login-button")
    
    # Click on product name
    await page.click(".inventory_item_name")
    
    # Verify product details page
    await expect(page.locator(".inventory_details_name")).to_be_visible()
    await expect(page.locator(".inventory_details_desc")).to_be_visible()
    await expect(page.locator(".inventory_details_price")).to_be_visible()
    
    # Save screenshot
    await page.screenshot(path="test-results/product_details_success.png")

async def test_locked_out_user(page: Page, locked_user):
    """Test locked out user login attempt"""
    # Navigate to login page
    await page.goto("https://www.saucedemo.com/")
    
    # Fill login form with locked out user
    await page.fill("#user-name", locked_user["username"])
    await page.fill("#password", locked_user["password"])
    
    # Click login button
    await page.click("#login-button")
    
    # Verify error message
    error = page.locator("[data-test='error']")
    await expect(error).to_be_visible()
    await expect(error).to_contain_text("Sorry, this user has been locked out")
    
    # Save screenshot
    await page.screenshot(path="test-results/locked_out_user.png")

async def test_cart_badge_update(page: Page, test_user):
    """Test cart badge updates correctly"""
    # Login first
    await page.goto("https://www.saucedemo.com/")
    await page.fill("#user-name", test_user["username"])
    await page.fill("#password", test_user["password"])
    await page.click("#login-button")
    
    # Add multiple items
    await page.click("#add-to-cart-sauce-labs-backpack")
    await page.click("#add-to-cart-sauce-labs-bike-light")
    await page.click("#add-to-cart-sauce-labs-bolt-t-shirt")
    
    # Verify cart badge shows correct count
    await expect(page.locator(".shopping_cart_badge")).to_have_text("3")
    
    # Remove one item
    await page.click("#remove-sauce-labs-backpack")
    
    # Verify cart badge updates
    await expect(page.locator(".shopping_cart_badge")).to_have_text("2")
    
    # Save screenshot
    await page.screenshot(path="test-results/cart_badge_update.png")

async def test_continue_shopping(page: Page, test_user):
    """Test continue shopping functionality"""
    # Login and add item to cart
    await page.goto("https://www.saucedemo.com/")
    await page.fill("#user-name", test_user["username"])
    await page.fill("#password", test_user["password"])
    await page.click("#login-button")
    await page.click("#add-to-cart-sauce-labs-backpack")
    
    # Go to cart
    await page.click(".shopping_cart_link")
    
    # Click continue shopping
    await page.click("#continue-shopping")
    
    # Verify back on inventory page
    await expect(page.locator(".inventory_list")).to_be_visible()
    
    # Add another item
    await page.click("#add-to-cart-sauce-labs-bike-light")
    
    # Verify cart badge updated
    await expect(page.locator(".shopping_cart_badge")).to_have_text("2")
    
    # Save screenshot
    await page.screenshot(path="test-results/continue_shopping.png")

async def test_cart_items_persist(page: Page, test_user):
    """Test cart items persist after logout/login"""
    # Login and add items to cart
    await page.goto("https://www.saucedemo.com/")
    await page.fill("#user-name", test_user["username"])
    await page.fill("#password", test_user["password"])
    await page.click("#login-button")
    await page.click("#add-to-cart-sauce-labs-backpack")
    await page.click("#add-to-cart-sauce-labs-bike-light")
    
    # Open menu and logout
    await page.click("#react-burger-menu-btn")
    await page.click("#logout_sidebar_link")
    
    # Login again
    await page.fill("#user-name", test_user["username"])
    await page.fill("#password", test_user["password"])
    await page.click("#login-button")
    
    # Verify cart items still present
    await expect(page.locator(".shopping_cart_badge")).to_have_text("2")
    
    # Save screenshot
    await page.screenshot(path="test-results/cart_items_persist.png")

async def test_problem_user_images(page: Page, problem_user):
    """Test problem user's product images"""
    # Login as problem user
    await page.goto("https://www.saucedemo.com/")
    await page.fill("#user-name", problem_user["username"])
    await page.fill("#password", problem_user["password"])
    await page.click("#login-button")
    
    # Get all product images
    images = page.locator(".inventory_item_img")
    
    # Verify all images have the same src (known issue with problem_user)
    first_src = await images.first.get_attribute("src")
    count = await images.count()
    for i in range(count):
        current_src = await images.nth(i).get_attribute("src")
        assert current_src == first_src, f"Image {i} has different src"
    
    # Save screenshot
    await page.screenshot(path="test-results/problem_user_images.png")

async def test_performance_login(page: Page, performance_user):
    """Test performance glitch user login time"""
    # Start timer
    await page.goto("https://www.saucedemo.com/")
    
    # Perform login
    with page.expect_response(re.compile(r".*")) as response_info:
        await page.fill("#user-name", performance_user["username"])
        await page.fill("#password", performance_user["password"])
        await page.click("#login-button")
    
    # Verify response time is longer than normal
    response = response_info.value
    assert response.timing["responseEnd"] - response.timing["requestStart"] > 1000
    
    # Verify successful login despite performance issue
    await expect(page.locator(".inventory_list")).to_be_visible()
    
    # Save screenshot
    await page.screenshot(path="test-results/performance_login.png")

async def test_cart_max_items(page: Page, test_user):
    """Test adding all available items to cart"""
    # Login first
    await page.goto("https://www.saucedemo.com/")
    await page.fill("#user-name", test_user["username"])
    await page.fill("#password", test_user["password"])
    await page.click("#login-button")
    
    # Add all items to cart
    add_buttons = page.locator("[id^='add-to-cart']")
    count = await add_buttons.count()
    for i in range(count):
        await add_buttons.nth(i).click()
    
    # Verify cart badge shows correct total
    await expect(page.locator(".shopping_cart_badge")).to_have_text(str(count))
    
    # Save screenshot
    await page.screenshot(path="test-results/cart_max_items.png")

async def test_price_format(page: Page, test_user):
    """Test price format consistency"""
    # Login first
    await page.goto("https://www.saucedemo.com/")
    await page.fill("#user-name", test_user["username"])
    await page.fill("#password", test_user["password"])
    await page.click("#login-button")
    
    # Get all prices
    prices = page.locator(".inventory_item_price")
    count = await prices.count()
    
    # Verify price format
    price_pattern = re.compile(r'^\$\d+\.\d{2}$')
    for i in range(count):
        price_text = await prices.nth(i).text_content()
        assert price_pattern.match(price_text), f"Invalid price format: {price_text}"
    
    # Save screenshot
    await page.screenshot(path="test-results/price_format.png")

async def test_inventory_image_load(page: Page, test_user):
    """Test all product images load correctly"""
    # Login first
    await page.goto("https://www.saucedemo.com/")
    await page.fill("#user-name", test_user["username"])
    await page.fill("#password", test_user["password"])
    await page.click("#login-button")
    
    # Get all product images
    images = page.locator(".inventory_item_img")
    count = await images.count()
    
    # Verify each image loads successfully
    for i in range(count):
        img = images.nth(i)
        # Verify image is visible
        await expect(img).to_be_visible()
        # Verify image has valid src
        src = await img.get_attribute("src")
        assert src and src.startswith("https://"), f"Invalid image source: {src}"
        # Verify image dimensions
        box = await img.bounding_box()
        assert box["width"] > 0 and box["height"] > 0, "Image has invalid dimensions"
    
    # Save screenshot
    await page.screenshot(path="test-results/inventory_images.png")
