"""
Test suite for QA Practice website components

Generated by AI Test Generator
Timestamp: 2025-01-02 18:46:25
"""

import pytest
from playwright.sync_api import Page, expect

@pytest.fixture
def form_data():
    """Test form data"""
    return {
        "name": "Test User",
        "email": "test@example.com",
        "message": "This is a test message"
    }

def test_text_input(page: Page):
    """Test text input functionality"""
    # Navigate to text input page
    page.goto("https://qa-practice.netlify.app/text-input")
    
    # Fill the input field
    test_text = "Hello, World!"
    page.fill("#textInput", test_text)
    
    # Click the button
    page.click("#submitButton")
    
    # Verify the output
    result = page.locator("#output")
    expect(result).to_be_visible()
    expect(result).to_have_text(test_text)
    
    # Save screenshot
    page.screenshot(path="test-results/text_input_success.png")

def test_form_submission(page: Page, form_data):
    """Test form submission"""
    # Navigate to form page
    page.goto("https://qa-practice.netlify.app/form")
    
    # Fill the form
    page.fill("#name", form_data["name"])
    page.fill("#email", form_data["email"])
    page.fill("#message", form_data["message"])
    
    # Submit form
    page.click("button[type='submit']")
    
    # Verify submission
    success_message = page.locator(".alert-success")
    expect(success_message).to_be_visible()
    expect(success_message).to_contain_text("Form submitted successfully!")
    
    # Save screenshot
    page.screenshot(path="test-results/form_success.png")

def test_checkbox(page: Page):
    """Test checkbox functionality"""
    # Navigate to checkbox page
    page.goto("https://qa-practice.netlify.app/checkbox")
    
    # Select checkboxes
    page.check("#checkbox1")
    page.check("#checkbox3")
    
    # Verify selections
    expect(page.locator("#checkbox1")).to_be_checked()
    expect(page.locator("#checkbox3")).to_be_checked()
    expect(page.locator("#checkbox2")).not_to_be_checked()
    
    # Save screenshot
    page.screenshot(path="test-results/checkbox_success.png")

def test_radio_buttons(page: Page):
    """Test radio button functionality"""
    # Navigate to radio button page
    page.goto("https://qa-practice.netlify.app/radio-button")
    
    # Select radio button
    page.check("#radio2")
    
    # Verify selection
    expect(page.locator("#radio2")).to_be_checked()
    expect(page.locator("#radio1")).not_to_be_checked()
    
    # Save screenshot
    page.screenshot(path="test-results/radio_success.png")

def test_dropdown(page: Page):
    """Test dropdown functionality"""
    # Navigate to dropdown page
    page.goto("https://qa-practice.netlify.app/dropdown")
    
    # Select option from dropdown
    page.select_option("#dropdown", "option2")
    
    # Verify selection
    selected = page.locator("#dropdown")
    expect(selected).to_have_value("option2")
    
    # Save screenshot
    page.screenshot(path="test-results/dropdown_success.png")

def test_dynamic_table(page: Page):
    """Test dynamic table functionality"""
    # Navigate to dynamic table page
    page.goto("https://qa-practice.netlify.app/dynamic-table")
    
    # Verify table is present
    table = page.locator(".table")
    expect(table).to_be_visible()
    
    # Verify table has data
    rows = page.locator("tbody tr")
    expect(rows).to_have_count(greater_than=0)
    
    # Save screenshot
    page.screenshot(path="test-results/table_success.png")

def test_alerts(page: Page):
    """Test alert handling"""
    # Navigate to alerts page
    page.goto("https://qa-practice.netlify.app/alerts")
    
    # Handle alert dialog
    page.on("dialog", lambda dialog: dialog.accept())
    
    # Click button to trigger alert
    page.click("#alert-button")
    
    # Verify alert was handled
    message = page.locator("#result")
    expect(message).to_be_visible()
    expect(message).to_contain_text("Alert accepted")
    
    # Save screenshot
    page.screenshot(path="test-results/alert_success.png")