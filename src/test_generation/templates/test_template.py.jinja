"""
{{ description }}

Generated by AI Test Generator
Timestamp: {{ timestamp }}
"""

import pytest
from playwright.sync_api import Page, expect

@pytest.fixture
def test_user():
    """Standard test user credentials"""
    return {
        "username": "standard_user",
        "password": "secret_sauce"
    }

@pytest.fixture
def product_data():
    """Test product data"""
    return {
        "backpack": {
            "name": "Sauce Labs Backpack",
            "price": "$29.99"
        },
        "bike_light": {
            "name": "Sauce Labs Bike Light",
            "price": "$9.99"
        }
    }

def test_login_success(page: Page, test_user):
    """Test successful login with valid credentials"""
    # Navigate to login page
    page.goto("https://www.saucedemo.com/")
    
    # Fill login form
    page.fill("#user-name", test_user["username"])
    page.fill("#password", test_user["password"])
    
    # Click login button
    page.click("#login-button")
    
    # Verify successful login
    expect(page.locator(".inventory_list")).to_be_visible()
    expect(page.locator(".shopping_cart_link")).to_be_visible()
    
    # Save screenshot
    page.screenshot(path="test-results/login_success.png")

def test_login_failure(page: Page):
    """Test login failure with invalid credentials"""
    # Navigate to login page
    page.goto("https://www.saucedemo.com/")
    
    # Fill login form with invalid credentials
    page.fill("#user-name", "invalid_user")
    page.fill("#password", "invalid_password")
    
    # Click login button
    page.click("#login-button")
    
    # Verify error message
    error = page.locator("[data-test='error']")
    expect(error).to_be_visible()
    expect(error).to_contain_text("Username and password do not match")
    
    # Save screenshot
    page.screenshot(path="test-results/login_failure.png")

def test_add_to_cart(page: Page, test_user, product_data):
    """Test adding products to cart"""
    # Login first
    page.goto("https://www.saucedemo.com/")
    page.fill("#user-name", test_user["username"])
    page.fill("#password", test_user["password"])
    page.click("#login-button")
    
    # Add backpack to cart
    page.click("#add-to-cart-sauce-labs-backpack")
    
    # Verify cart badge
    cart_badge = page.locator(".shopping_cart_badge")
    expect(cart_badge).to_be_visible()
    expect(cart_badge).to_have_text("1")
    
    # Add bike light to cart
    page.click("#add-to-cart-sauce-labs-bike-light")
    expect(cart_badge).to_have_text("2")
    
    # Save screenshot
    page.screenshot(path="test-results/add_to_cart_success.png")

def test_remove_from_cart(page: Page, test_user):
    """Test removing products from cart"""
    # Login and add item to cart first
    page.goto("https://www.saucedemo.com/")
    page.fill("#user-name", test_user["username"])
    page.fill("#password", test_user["password"])
    page.click("#login-button")
    page.click("#add-to-cart-sauce-labs-backpack")
    
    # Remove item from cart
    page.click("#remove-sauce-labs-backpack")
    
    # Verify cart is empty
    cart_badge = page.locator(".shopping_cart_badge")
    expect(cart_badge).not_to_be_visible()
    
    # Save screenshot
    page.screenshot(path="test-results/remove_from_cart_success.png")

def test_checkout_process(page: Page, test_user):
    """Test complete checkout process"""
    # Login and add item to cart
    page.goto("https://www.saucedemo.com/")
    page.fill("#user-name", test_user["username"])
    page.fill("#password", test_user["password"])
    page.click("#login-button")
    page.click("#add-to-cart-sauce-labs-backpack")
    
    # Go to cart
    page.click(".shopping_cart_link")
    
    # Start checkout
    page.click("#checkout")
    
    # Fill checkout information
    page.fill("#first-name", "Test")
    page.fill("#last-name", "User")
    page.fill("#postal-code", "12345")
    
    # Continue to overview
    page.click("#continue")
    
    # Verify checkout overview
    expect(page.locator(".summary_info")).to_be_visible()
    
    # Complete checkout
    page.click("#finish")
    
    # Verify success message
    expect(page.locator(".complete-header")).to_be_visible()
    expect(page.locator(".complete-header")).to_have_text("Thank you for your order!")
    
    # Save screenshot
    page.screenshot(path="test-results/checkout_success.png")

def test_product_sort(page: Page, test_user):
    """Test product sorting functionality"""
    # Login first
    page.goto("https://www.saucedemo.com/")
    page.fill("#user-name", test_user["username"])
    page.fill("#password", test_user["password"])
    page.click("#login-button")
    
    # Sort by price high to low
    page.select_option(".product_sort_container", "hilo")
    
    # Verify first item is highest priced
    first_price = page.locator(".inventory_item_price").first
    expect(first_price).to_contain_text("$49.99")
    
    # Sort by price low to high
    page.select_option(".product_sort_container", "lohi")
    
    # Verify first item is lowest priced
    first_price = page.locator(".inventory_item_price").first
    expect(first_price).to_contain_text("$7.99")
    
    # Save screenshot
    page.screenshot(path="test-results/sort_success.png")

def test_product_details(page: Page, test_user):
    """Test viewing product details"""
    # Login first
    page.goto("https://www.saucedemo.com/")
    page.fill("#user-name", test_user["username"])
    page.fill("#password", test_user["password"])
    page.click("#login-button")
    
    # Click on product name
    page.click(".inventory_item_name")
    
    # Verify product details page
    expect(page.locator(".inventory_details_name")).to_be_visible()
    expect(page.locator(".inventory_details_desc")).to_be_visible()
    expect(page.locator(".inventory_details_price")).to_be_visible()
    
    # Save screenshot
    page.screenshot(path="test-results/product_details_success.png")
