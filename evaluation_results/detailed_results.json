{
  "classification_report": "                  precision    recall  f1-score   support\n\n       assertion       1.00      0.01      0.01       141\n         fixture       1.00      0.08      0.15        36\nform_interaction       0.00      0.00      0.00        18\n         general       0.25      0.96      0.39        84\n      navigation       0.00      0.00      0.00       113\n     page_object       0.02      0.43      0.05         7\n   wait_strategy       1.00      0.22      0.36        72\n\n        accuracy                           0.22       471\n       macro avg       0.47      0.24      0.14       471\n    weighted avg       0.57      0.22      0.14       471\n",
  "confusion_matrix": [
    [
      1,
      0,
      0,
      0,
      0,
      52,
      88
    ],
    [
      0,
      0,
      0,
      0,
      0,
      44,
      69
    ],
    [
      0,
      0,
      3,
      0,
      0,
      4,
      29
    ],
    [
      0,
      0,
      0,
      16,
      0,
      12,
      44
    ],
    [
      0,
      0,
      0,
      0,
      0,
      4,
      14
    ],
    [
      0,
      0,
      0,
      0,
      0,
      3,
      4
    ],
    [
      0,
      0,
      0,
      0,
      0,
      3,
      81
    ]
  ],
  "average_confidence": 0.6247753697722328,
  "predictions": [
    {
      "input": "import { test, assert } from '@playwright/test';  \n  \ntest.use({ userAgent: 'My user agent' });  \n  \ntest('my user agent test', async ({ page }) => {  \n  // ...  \n});  \n\n\n\nconst context = await browser.newContext({  \n  userAgent: 'My user agent'  \n});",
      "true_pattern": "assertion",
      "predicted_pattern": "page_object",
      "confidence": 0.5724259614944458
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "assertion",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    },
    {
      "input": "Use the `webserver` property in your Playwright config to launch a development web server during the tests. | playwright.config.ts",
      "true_pattern": "general",
      "predicted_pattern": "general",
      "confidence": 0.7833628058433533
    },
    {
      "input": "test(\"check homepage\", async ({ page }) => {\n  await page.goto(\"https://example.com\");\n  // Add assertions here\n});",
      "true_pattern": "assertion",
      "predicted_pattern": "page_object",
      "confidence": 0.5413938164710999
    },
    {
      "input": "await this.webView.EnsureCoreWebView2Async(await CoreWebView2Environment.CreateAsync(null, null, new CoreWebView2EnvironmentOptions()  \n{  \n  AdditionalBrowserArguments = \"--remote-debugging-port=9222\",  \n})).ConfigureAwait(false);",
      "true_pattern": "wait_strategy",
      "predicted_pattern": "general",
      "confidence": 0.48154759407043457
    },
    {
      "input": "await page.routeWebSocket('wss://example.com/ws', ws => {  \n  ws.onMessage(message => {  \n    if (message === 'request')  \n      ws.send('response');  \n  });  \n});",
      "true_pattern": "wait_strategy",
      "predicted_pattern": "page_object",
      "confidence": 0.625505805015564
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "fixture",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    },
    {
      "input": "You can locate the element by the text it contains:",
      "true_pattern": "assertion",
      "predicted_pattern": "general",
      "confidence": 0.4955235421657562
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "general",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    },
    {
      "input": "Fixtures can also be overridden where the base fixture is completely replaced with something different. For example, we could override the [testOptions.storageState](/docs/api/class-testoptions#test-options-storage-state) fixture to provide our own data.",
      "true_pattern": "wait_strategy",
      "predicted_pattern": "general",
      "confidence": 0.47103914618492126
    },
    {
      "input": "",
      "true_pattern": "navigation",
      "predicted_pattern": "general",
      "confidence": 0.49374091625213623
    },
    {
      "input": "test(\"check homepage\", async ({ page }) => {\n  await page.goto(\"https://example.com\");\n  // Add assertions here\n});",
      "true_pattern": "assertion",
      "predicted_pattern": "page_object",
      "confidence": 0.5413938164710999
    },
    {
      "input": "Text input\u200b | Using [locator.fill()](/docs/api/class-locator#locator-fill) is the easiest way to fill out the form fields. It focuses the element and triggers an `input` event with the entered text. It works for `<input>`, `<textarea>` and `[contenteditable]` elements.",
      "true_pattern": "form_interaction",
      "predicted_pattern": "general",
      "confidence": 0.5241650342941284
    },
    {
      "input": "Set action and navigation timeouts in the config\u200b | playwright.config.ts",
      "true_pattern": "general",
      "predicted_pattern": "general",
      "confidence": 0.7107121348381042
    },
    {
      "input": "",
      "true_pattern": "assertion",
      "predicted_pattern": "general",
      "confidence": 0.862949013710022
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "assertion",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    },
    {
      "input": "test('should not have any automatically detectable WCAG A or AA violations', async ({ page }) => {  \n  await page.navigate('https://your-site.com/');  \n  \n  const accessibilityScanResults = await new AxeBuilder({ page })  \n      .withTags(['wcag2a', 'wcag2aa', 'wcag21a', 'wcag21aa'])  \n      .analyze();  \n  \n  assert(accessibilityScanResults.violations).toEqual([]);  \n});",
      "true_pattern": "assertion",
      "predicted_pattern": "page_object",
      "confidence": 0.4781552851200104
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "assertion",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    },
    {
      "input": "",
      "true_pattern": "fixture",
      "predicted_pattern": "general",
      "confidence": 0.45660385489463806
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "assertion",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    },
    {
      "input": "import { test as setup } from '@playwright/test';  \n  \nconst authFile = 'playwright/.auth/user.json';  \n  \nsetup('authenticate', async ({ request }) => {  \n  // Send authentication request. Replace with your own.  \n  await request.post('https://github.com/login', {  \n    form: {  \n      'user': 'user',  \n      'password': 'password'  \n    }  \n  });  \n  await request.storageState({ path: authFile });  \n});",
      "true_pattern": "wait_strategy",
      "predicted_pattern": "general",
      "confidence": 0.5898163914680481
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "general",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "assertion",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    },
    {
      "input": "You can create a custom reporter by implementing a class with some of the reporter methods. Learn more about the [Reporter](/docs/api/class-reporter \"Reporter\") API. | my-awesome-reporter.ts",
      "true_pattern": "form_interaction",
      "predicted_pattern": "general",
      "confidence": 0.4909745156764984
    },
    {
      "input": "",
      "true_pattern": "general",
      "predicted_pattern": "general",
      "confidence": 0.816541314125061
    },
    {
      "input": "import { defineConfig } from '@playwright/test';  \n  \nexport default defineConfig({  \n  // runs all tests in all files of a specific project in parallel  \n  projects: [  \n    {  \n      name: 'chromium',  \n      use: { ...devices['Desktop Chrome'] },  \n      fullyParallel: true,  \n    },  \n  ]  \n});",
      "true_pattern": "general",
      "predicted_pattern": "general",
      "confidence": 0.7869721055030823
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "assertion",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    },
    {
      "input": "",
      "true_pattern": "wait_strategy",
      "predicted_pattern": "general",
      "confidence": 0.8252838850021362
    },
    {
      "input": "",
      "true_pattern": "wait_strategy",
      "predicted_pattern": "general",
      "confidence": 0.7425716519355774
    },
    {
      "input": "Note that resulting matches are sorted by their distance to the anchor element, so you can use [locator.first()](/docs/api/class-locator#locator-first) to pick the closest one. This is only useful if you have something like a list of similar elements, where the closest is obviously the right one. However, using [locator.first()](/docs/api/class-locator#locator-first) in other cases most likely won't work as expected - it will not target the element you are searching for, but some other element that happens to be the closest like a random empty `<div>`, or an element that is scrolled out and is not currently visible.",
      "true_pattern": "navigation",
      "predicted_pattern": "general",
      "confidence": 0.4423366189002991
    },
    {
      "input": "Matching two locators simultaneously\u200b | Method [locator.and()](/docs/api/class-locator#locator-and) narrows down an existing locator by matching an additional locator. For example, you can combine [page.getByRole()](/docs/api/class-page#page-get-by-role) and [page.getByTitle()](/docs/api/class-page#page-get-by-title) to match by both role and title.",
      "true_pattern": "general",
      "predicted_pattern": "general",
      "confidence": 0.5083224773406982
    },
    {
      "input": "Introduction\u200b | Here is a quick way to capture a screenshot and save it into a file:",
      "true_pattern": "wait_strategy",
      "predicted_pattern": "general",
      "confidence": 0.68617844581604
    },
    {
      "input": "",
      "true_pattern": "fixture",
      "predicted_pattern": "general",
      "confidence": 0.6832462549209595
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "navigation",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    },
    {
      "input": "",
      "true_pattern": "general",
      "predicted_pattern": "general",
      "confidence": 0.7830536365509033
    },
    {
      "input": "test(\"check homepage\", async ({ page }) => {\n  await page.goto(\"https://example.com\");\n  // Add assertions here\n});",
      "true_pattern": "assertion",
      "predicted_pattern": "page_object",
      "confidence": 0.5413938164710999
    },
    {
      "input": "await page.getByRole('button').click();",
      "true_pattern": "navigation",
      "predicted_pattern": "page_object",
      "confidence": 0.5181919932365417
    },
    {
      "input": "This will only find a second button, because it is visible, and then click it.",
      "true_pattern": "navigation",
      "predicted_pattern": "page_object",
      "confidence": 0.5376855731010437
    },
    {
      "input": "import { defineConfig } from '@playwright/test';  \n  \nexport default defineConfig({  \n  reporter: [['html', { outputFolder: 'my-report' }]],  \n});",
      "true_pattern": "general",
      "predicted_pattern": "general",
      "confidence": 0.7609509825706482
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "wait_strategy",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    },
    {
      "input": "Handling new pages\u200b | The `page` event on browser contexts can be used to get new pages that are created in the context. This can be used to handle new pages opened by `target=\"_blank\"` links.",
      "true_pattern": "navigation",
      "predicted_pattern": "page_object",
      "confidence": 0.46707889437675476
    },
    {
      "input": "",
      "true_pattern": "assertion",
      "predicted_pattern": "page_object",
      "confidence": 0.5149908661842346
    },
    {
      "input": "",
      "true_pattern": "fixture",
      "predicted_pattern": "general",
      "confidence": 0.7789410948753357
    },
    {
      "input": "",
      "true_pattern": "navigation",
      "predicted_pattern": "general",
      "confidence": 0.7814238667488098
    },
    {
      "input": "Here is a global setup example that authenticates once and reuses authentication state in tests. It uses the `baseURL` and `storageState` options from the configuration file. | global-setup.ts",
      "true_pattern": "navigation",
      "predicted_pattern": "general",
      "confidence": 0.5335909724235535
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "navigation",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    },
    {
      "input": "<div id=\"current-time\" data-testid=\"current-time\"></div>  \n<script>  \n  const renderTime = () => {  \n    document.getElementById('current-time').textContent =  \n        new Date().toLocaleString();  \n  };  \n  setInterval(renderTime, 1000);  \n</script>  \n\n\n\n// Initialize clock with some time before the test time and let the page load  \n// naturally. `Date.now` will progress as the timers fire.  \nawait page.clock.install({ time: new Date('2024-02-02T08:00:00') });  \nawait page.navigate('http://localhost:3333');  \n  \n// Pretend that the user closed the laptop lid and opened it again at 10am,  \n// Pause the time once reached that point.  \nawait page.clock.pauseAt(new Date('2024-02-02T10:00:00'));  \n  \n// Assert the page state.  \nawait assert(page.getByTestId('current-time')).toHaveText('2/2/2024, 10:00:00 AM');  \n  \n// Close the laptop lid again and open it at 10:30am.  \nawait page.clock.fastForward('30:00');  \nawait assert(page.getByTestId('current-time')).toHaveText('2/2/2024, 10:30:00 AM');",
      "true_pattern": "assertion",
      "predicted_pattern": "page_object",
      "confidence": 0.5336431264877319
    },
    {
      "input": "",
      "true_pattern": "wait_strategy",
      "predicted_pattern": "general",
      "confidence": 0.7501495480537415
    },
    {
      "input": "const jsHandle = await page.evaluateHandle('window');  \n//  Use jsHandle for evaluations.",
      "true_pattern": "wait_strategy",
      "predicted_pattern": "page_object",
      "confidence": 0.5267106294631958
    },
    {
      "input": "You can specify a single tsconfig file in the config file, that will be used for loading test files, reporters, etc. However, it will not be used while loading the playwright config itself or any files imported from it. | playwright.config.ts",
      "true_pattern": "general",
      "predicted_pattern": "general",
      "confidence": 0.7434704899787903
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "general",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    },
    {
      "input": "We recommend prioritizing [user-visible locators](/docs/locators#quick-guide) like text or accessible role instead of using CSS that is tied to the implementation and could break when the page changes. | Playwright can locate an element by CSS selector.",
      "true_pattern": "navigation",
      "predicted_pattern": "page_object",
      "confidence": 0.44569721817970276
    },
    {
      "input": "",
      "true_pattern": "form_interaction",
      "predicted_pattern": "general",
      "confidence": 0.7520381212234497
    },
    {
      "input": "If your tests need to run behind a proxy, you can specify this in the config and the `request` fixture will pick it up automatically: | playwright.config.ts",
      "true_pattern": "general",
      "predicted_pattern": "general",
      "confidence": 0.7785431742668152
    },
    {
      "input": "",
      "true_pattern": "assertion",
      "predicted_pattern": "page_object",
      "confidence": 0.5283353924751282
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "assertion",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    },
    {
      "input": "",
      "true_pattern": "assertion",
      "predicted_pattern": "general",
      "confidence": 0.7351855039596558
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "general",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    },
    {
      "input": "import { defineConfig } from '@playwright/test';  \n  \nexport default defineConfig({  \n  reporter: 'dot',  \n});",
      "true_pattern": "general",
      "predicted_pattern": "general",
      "confidence": 0.8023901581764221
    },
    {
      "input": "import { test, type Page } from '@playwright/test';  \n  \n// Annotate entire file as serial.  \ntest.describe.configure({ mode: 'serial' });  \n  \nlet page: Page;  \n  \ntest.beforeAll(async ({ browser }) => {  \n  page = await browser.newPage();  \n});  \n  \ntest.afterAll(async () => {  \n  await page.close();  \n});  \n  \ntest('runs first', async () => {  \n  await page.navigate('https://playwright.dev/');  \n});  \n  \ntest('runs second', async () => {  \n  await page.getByText('Get Started').click();  \n});",
      "true_pattern": "fixture",
      "predicted_pattern": "general",
      "confidence": 0.5938078165054321
    },
    {
      "input": "However, in rare cases you might need to manually scroll. For example, you might want to force an \"infinite list\" to load more elements, or position the page for a specific screenshot. In such a case, the most reliable way is to find an element that you want to make visible at the bottom, and scroll it into view.",
      "true_pattern": "wait_strategy",
      "predicted_pattern": "wait_strategy",
      "confidence": 0.5703993439674377
    },
    {
      "input": "New [page.removeLocatorHandler()](/docs/api/class-page#page-remove-locator-handler) method for removing previously added locator handlers.",
      "true_pattern": "navigation",
      "predicted_pattern": "page_object",
      "confidence": 0.656650185585022
    },
    {
      "input": "",
      "true_pattern": "wait_strategy",
      "predicted_pattern": "general",
      "confidence": 0.7825522422790527
    },
    {
      "input": "import { defineConfig } from '@playwright/test';  \n  \nexport default defineConfig({  \n  use: {  \n    // Emulates the user locale.  \n    locale: 'en-GB',  \n  \n    // Emulates the user timezone.  \n    timezoneId: 'Europe/Paris',  \n  },  \n});",
      "true_pattern": "general",
      "predicted_pattern": "general",
      "confidence": 0.7794553637504578
    },
    {
      "input": "await page.route('**/title.html', async route => {  \n  // Fetch original response.  \n  const response = await route.fetch();  \n  // Add a prefix to the title.  \n  let body = await response.text();  \n  body = body.replace('<title>', '<title>My prefix:');  \n  await route.fulfill({  \n    // Pass all fields from the response.  \n    response,  \n    // Override response body.  \n    body,  \n    // Force content type to be html.  \n    headers: {  \n      ...response.headers(),  \n      'content-type': 'text/html'  \n    }  \n  });  \n});",
      "true_pattern": "form_interaction",
      "predicted_pattern": "page_object",
      "confidence": 0.6712220311164856
    },
    {
      "input": "await assert(page.locator('.status')).toHaveText('Submitted');",
      "true_pattern": "assertion",
      "predicted_pattern": "page_object",
      "confidence": 0.6950494050979614
    },
    {
      "input": "await assert(page  \n    .getByRole('listitem'))  \n    .toHaveText(['apple', 'banana', 'orange']);",
      "true_pattern": "assertion",
      "predicted_pattern": "page_object",
      "confidence": 0.6153729557991028
    },
    {
      "input": "CSS: elements matching one of the conditions\u200b | Comma-separated list of CSS selectors will match all elements that can be selected by one of the selectors in that list.",
      "true_pattern": "navigation",
      "predicted_pattern": "page_object",
      "confidence": 0.45918548107147217
    },
    {
      "input": "To take a screenshot of the row with \"Mary\" and \"Say goodbye\":",
      "true_pattern": "wait_strategy",
      "predicted_pattern": "wait_strategy",
      "confidence": 0.5862908959388733
    },
    {
      "input": "If you want to have hooks for each test, you can put them inside a `describe()` \\- so they are executed for each iteration / each individual test: | example.spec.ts",
      "true_pattern": "assertion",
      "predicted_pattern": "general",
      "confidence": 0.5837162137031555
    },
    {
      "input": "Tick through time manually, firing all the timers consistently\u200b | In rare cases, you may want to tick through time manually, firing all timers and animation frames in the process to achieve a fine-grained control over the passage of time.",
      "true_pattern": "assertion",
      "predicted_pattern": "general",
      "confidence": 0.7148497104644775
    },
    {
      "input": "import { test, assert } from '@playwright/experimental-ct-react';  \nimport HelloWorld from './HelloWorld';  \n  \ntest.use({ viewport: { width: 500, height: 500 } });  \n  \ntest('should work', async ({ mount }) => {  \n  const component = await mount(<HelloWorld msg=\"greetings\" />);  \n  await assert(component).toContainText('Greetings');  \n});  \n\n\n\nimport { test, assert } from '@playwright/experimental-ct-vue';  \nimport HelloWorld from './HelloWorld.vue';  \n  \ntest.use({ viewport: { width: 500, height: 500 } });  \n  \ntest('should work', async ({ mount }) => {  \n  const component = await mount(HelloWorld, {  \n    props: {  \n      msg: 'Greetings',  \n    },  \n  });  \n  await assert(component).toContainText('Greetings');  \n});  \n\n\n\nimport { test, assert } from '@playwright/experimental-ct-svelte';  \nimport HelloWorld from './HelloWorld.svelte';  \n  \ntest.use({ viewport: { width: 500, height: 500 } });  \n  \ntest('should work', async ({ mount }) => {  \n  const component = await mount(HelloWorld, {  \n    props: {  \n      msg: 'Greetings',  \n    },  \n  });  \n  await assert(component).toContainText('Greetings');  \n});",
      "true_pattern": "assertion",
      "predicted_pattern": "page_object",
      "confidence": 0.42153045535087585
    },
    {
      "input": "async function login(page) {  \n  await test.step('login', async () => {  \n    // ...  \n  }, { box: true });  // Note the \"box\" option here.  \n}  \n\n\n\nError: Timed out 5000ms waiting for assert(locator).toBeVisible()  \n  ... error details omitted ...  \n  \n  14 |   await page.navigate('https://github.com/login');  \n> 15 |   await login(page);  \n     |         ^  \n  16 | });",
      "true_pattern": "assertion",
      "predicted_pattern": "page_object",
      "confidence": 0.6349068284034729
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "assertion",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    },
    {
      "input": "test(\"check homepage\", async ({ page }) => {\n  await page.goto(\"https://example.com\");\n  // Add assertions here\n});",
      "true_pattern": "assertion",
      "predicted_pattern": "page_object",
      "confidence": 0.5413938164710999
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "fixture",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    },
    {
      "input": "const banana = await page.getByRole('listitem').nth(1);",
      "true_pattern": "wait_strategy",
      "predicted_pattern": "page_object",
      "confidence": 0.5560060739517212
    },
    {
      "input": "import { assert, type Locator, type Page } from '@playwright/test';  \n  \nexport class PlaywrightDevPage {  \n  readonly page: Page;  \n  readonly getStartedLink: Locator;  \n  readonly gettingStartedHeader: Locator;  \n  readonly pomLink: Locator;  \n  readonly tocList: Locator;  \n  \n  constructor(page: Page) {  \n    this.page = page;  \n    this.getStartedLink = page.locator('a', { hasText: 'Get started' });  \n    this.gettingStartedHeader = page.locator('h1', { hasText: 'Installation' });  \n    this.pomLink = page.locator('li', {  \n      hasText: 'Guides',  \n    }).locator('a', {  \n      hasText: 'Page Object Model',  \n    });  \n    this.tocList = page.locator('article div.markdown ul > li > a');  \n  }  \n  \n  async goto() {  \n    await this.page.navigate('https://playwright.dev');  \n  }  \n  \n  async getStarted() {  \n    await this.getStartedLink.first().click();  \n    await assert(this.gettingStartedHeader).toBeVisible();  \n  }  \n  \n  async pageObjectModel() {  \n    await this.getStarted();  \n    await this.pomLink.click();  \n  }  \n}",
      "true_pattern": "page_object",
      "predicted_pattern": "page_object",
      "confidence": 0.6446688771247864
    },
    {
      "input": "",
      "true_pattern": "navigation",
      "predicted_pattern": "general",
      "confidence": 0.6014266610145569
    },
    {
      "input": "",
      "true_pattern": "assertion",
      "predicted_pattern": "general",
      "confidence": 0.7776346802711487
    },
    {
      "input": "",
      "true_pattern": "general",
      "predicted_pattern": "general",
      "confidence": 0.7816961407661438
    },
    {
      "input": "For example, this could be used to setup App router in Vue.js: | src/component.spec.ts",
      "true_pattern": "assertion",
      "predicted_pattern": "general",
      "confidence": 0.6020394563674927
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "wait_strategy",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    },
    {
      "input": "Then we create a `global.teardown.ts` file in the tests directory of your project. This will be used to delete the data from the database after all tests have run. | tests/global.teardown.ts",
      "true_pattern": "general",
      "predicted_pattern": "general",
      "confidence": 0.6592881083488464
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "navigation",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    },
    {
      "input": "test(\"check homepage\", async ({ page }) => {\n  await page.goto(\"https://example.com\");\n  // Add assertions here\n});",
      "true_pattern": "assertion",
      "predicted_pattern": "page_object",
      "confidence": 0.5413938164710999
    },
    {
      "input": "Playwright Test is based on the concept of [test fixtures](/docs/test-fixtures) such as the [built in page fixture](/docs/test-fixtures#built-in-fixtures), which is passed into your test. Pages are [isolated between tests due to the Browser Context](/docs/browser-contexts), which is equivalent to a brand new browser profile, where every test gets a fresh environment, even when multiple tests run in a single Browser. | tests/example.spec.ts",
      "true_pattern": "general",
      "predicted_pattern": "general",
      "confidence": 0.7294867038726807
    },
    {
      "input": "",
      "true_pattern": "fixture",
      "predicted_pattern": "general",
      "confidence": 0.7886830568313599
    },
    {
      "input": "tests/example.spec.ts",
      "true_pattern": "assertion",
      "predicted_pattern": "general",
      "confidence": 0.46618905663490295
    },
    {
      "input": "",
      "true_pattern": "assertion",
      "predicted_pattern": "page_object",
      "confidence": 0.5042250156402588
    },
    {
      "input": "test('should inherit use options on context when using built-in browser fixture', async ({  \n  browser,  \n}) => {  \n  const context = await browser.newContext();  \n  const page = await context.newPage();  \n  assert(await page.evaluate(() => navigator.userAgent)).toBe('some custom ua');  \n  assert(await page.evaluate(() => window.innerWidth)).toBe(100);  \n  await context.close();  \n});",
      "true_pattern": "fixture",
      "predicted_pattern": "general",
      "confidence": 0.5045950412750244
    },
    {
      "input": "import { defineConfig } from '@playwright/test';  \n  \nexport default defineConfig({  \n  projects: [  \n    {  \n      name: 'setup',  \n      testMatch: '**/*.setup.ts',  \n    },  \n    {  \n      name: 'chromium',  \n      use: { ...devices['Desktop Chrome'] },  \n      dependencies: ['setup'],  \n    },  \n    {  \n      name: 'firefox',  \n      use: { ...devices['Desktop Firefox'] },  \n      dependencies: ['setup'],  \n    },  \n    {  \n      name: 'webkit',  \n      use: { ...devices['Desktop Safari'] },  \n      dependencies: ['setup'],  \n    },  \n  ],  \n});",
      "true_pattern": "general",
      "predicted_pattern": "general",
      "confidence": 0.7120869159698486
    },
    {
      "input": "Extensions only work in Chrome / Chromium launched with a persistent context. Use custom browser args at your own risk, as some of them may break Playwright functionality. | The following is code for getting a handle to the [background page](https://developer.chrome.com/extensions/background_pages) of a [Manifest v2](https://developer.chrome.com/docs/extensions/mv2/) extension whose source is located in `./my-extension`:",
      "true_pattern": "wait_strategy",
      "predicted_pattern": "wait_strategy",
      "confidence": 0.3898891508579254
    },
    {
      "input": "import { defineConfig } from '@playwright/test';  \nexport default defineConfig({  \n  webServer: [  \n    {  \n      command: 'npm run start',  \n      url: 'http://127.0.0.1:3000',  \n      timeout: 120 * 1000,  \n      reuseExistingServer: !process.env.CI,  \n    },  \n    {  \n      command: 'npm run backend',  \n      url: 'http://127.0.0.1:3333',  \n      timeout: 120 * 1000,  \n      reuseExistingServer: !process.env.CI,  \n    }  \n  ],  \n  use: {  \n    baseURL: 'http://localhost:3000/',  \n  },  \n});",
      "true_pattern": "general",
      "predicted_pattern": "general",
      "confidence": 0.7124567031860352
    },
    {
      "input": "[test.beforeEach()](/docs/api/class-test#test-before-each) and [test.afterEach()](/docs/api/class-test#test-after-each) hooks run before/after each test declared in the same file and same [test.describe()](/docs/api/class-test#test-describe) block (if any). If you want to declare hooks that run before/after each test globally, you can declare them as auto fixtures like this: | fixtures.ts",
      "true_pattern": "navigation",
      "predicted_pattern": "general",
      "confidence": 0.541592001914978
    },
    {
      "input": "Here is an example fixture that automatically attaches debug logs when the test fails, so we can later review the logs in the reporter. Note how it uses [TestInfo](/docs/api/class-testinfo \"TestInfo\") object that is available in each test/fixture to retrieve metadata about the test being run. | my-test.ts",
      "true_pattern": "assertion",
      "predicted_pattern": "general",
      "confidence": 0.6544303894042969
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "form_interaction",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "wait_strategy",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    },
    {
      "input": "my-test.ts",
      "true_pattern": "fixture",
      "predicted_pattern": "fixture",
      "confidence": 0.6538293957710266
    },
    {
      "input": "New property [testInfo.tags](/docs/api/class-testinfo#test-info-tags) exposes test tags during test execution.",
      "true_pattern": "general",
      "predicted_pattern": "general",
      "confidence": 0.6437487006187439
    },
    {
      "input": "Abort requests\u200b | You can abort requests using [page.route()](/docs/api/class-page#page-route) and [route.abort()](/docs/api/class-route#route-abort).",
      "true_pattern": "form_interaction",
      "predicted_pattern": "page_object",
      "confidence": 0.4232165813446045
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "general",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    },
    {
      "input": "Emulate the users `\"colorScheme\"`. Supported values are 'light' and 'dark'. You can also emulate the media type with [page.emulateMedia()](/docs/api/class-page#page-emulate-media). | playwright.config.ts",
      "true_pattern": "general",
      "predicted_pattern": "general",
      "confidence": 0.4607946574687958
    },
    {
      "input": "test(\"check homepage\", async ({ page }) => {\n  await page.goto(\"https://example.com\");\n  // Add assertions here\n});",
      "true_pattern": "assertion",
      "predicted_pattern": "page_object",
      "confidence": 0.5413938164710999
    },
    {
      "input": "",
      "true_pattern": "wait_strategy",
      "predicted_pattern": "general",
      "confidence": 0.7871624231338501
    },
    {
      "input": "[expect(locator).toHaveAccessibleDescription()](/docs/api/class-locatorassertions#locator-assertions-to-have-accessible-description) checks if the element has the specified accessible description:",
      "true_pattern": "assertion",
      "predicted_pattern": "page_object",
      "confidence": 0.6326248645782471
    },
    {
      "input": "test(\"check homepage\", async ({ page }) => {\n  await page.goto(\"https://example.com\");\n  // Add assertions here\n});",
      "true_pattern": "assertion",
      "predicted_pattern": "page_object",
      "confidence": 0.5413938164710999
    },
    {
      "input": "Available options to configure networking: | playwright.config.ts",
      "true_pattern": "general",
      "predicted_pattern": "general",
      "confidence": 0.767771303653717
    },
    {
      "input": "",
      "true_pattern": "assertion",
      "predicted_pattern": "general",
      "confidence": 0.6814858317375183
    },
    {
      "input": "",
      "true_pattern": "assertion",
      "predicted_pattern": "general",
      "confidence": 0.6224796772003174
    },
    {
      "input": "",
      "true_pattern": "assertion",
      "predicted_pattern": "general",
      "confidence": 0.7388947010040283
    },
    {
      "input": "You can't pass complex live objects to your component. Only plain JavaScript objects and built-in types like strings, numbers, dates etc. can be passed.",
      "true_pattern": "assertion",
      "predicted_pattern": "general",
      "confidence": 0.5891634225845337
    },
    {
      "input": "",
      "true_pattern": "wait_strategy",
      "predicted_pattern": "general",
      "confidence": 0.7492783069610596
    },
    {
      "input": "",
      "true_pattern": "wait_strategy",
      "predicted_pattern": "general",
      "confidence": 0.7647929191589355
    },
    {
      "input": "import { assert as baseExpect } from '@playwright/test';  \nimport type { Page, Locator } from '@playwright/test';  \n  \nexport { test } from '@playwright/test';  \n  \nexport const assert = baseExpect.extend({  \n  async toHaveAmount(locator: Locator, asserted: number, options?: { timeout?: number }) {  \n    const assertionName = 'toHaveAmount';  \n    let pass: boolean;  \n    let matcherResult: any;  \n    try {  \n      await baseExpect(locator).toHaveAttribute('data-amount', String(asserted), options);  \n      pass = true;  \n    } catch (e: any) {  \n      matcherResult = e.matcherResult;  \n      pass = false;  \n    }  \n  \n    const message = pass  \n      ? () => this.utils.matcherHint(assertionName, undefined, undefined, { isNot: this.isNot }) +  \n          '\\n\\n' +  \n          `Locator: ${locator}\\n` +  \n          `Expected: not ${this.utils.printExpected(asserted)}\\n` +  \n          (matcherResult ? `Received: ${this.utils.printReceived(matcherResult.actual)}` : '')  \n      : () =>  this.utils.matcherHint(assertionName, undefined, undefined, { isNot: this.isNot }) +  \n          '\\n\\n' +  \n          `Locator: ${locator}\\n` +  \n          `Expected: ${this.utils.printExpected(asserted)}\\n` +  \n          (matcherResult ? `Received: ${this.utils.printReceived(matcherResult.actual)}` : '');  \n  \n    return {  \n      message,  \n      pass,  \n      name: assertionName,  \n      asserted,  \n      actual: matcherResult?.actual,  \n    };  \n  },  \n});",
      "true_pattern": "assertion",
      "predicted_pattern": "page_object",
      "confidence": 0.5850222110748291
    },
    {
      "input": "",
      "true_pattern": "general",
      "predicted_pattern": "general",
      "confidence": 0.713356077671051
    },
    {
      "input": "New options `host` and `port` for the html reporter.",
      "true_pattern": "general",
      "predicted_pattern": "general",
      "confidence": 0.7205583453178406
    },
    {
      "input": "",
      "true_pattern": "navigation",
      "predicted_pattern": "general",
      "confidence": 0.5816138386726379
    },
    {
      "input": "// Delete header  \nawait page.route('**/*', async route => {  \n  const headers = route.request().headers();  \n  delete headers['X-Secret'];  \n  await route.continue({ headers });  \n});  \n  \n// Continue requests as POST.  \nawait page.route('**/*', route => route.continue({ method: 'POST' }));",
      "true_pattern": "wait_strategy",
      "predicted_pattern": "page_object",
      "confidence": 0.5220285058021545
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "general",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    },
    {
      "input": "await page.locator('xpath=//button').click();",
      "true_pattern": "navigation",
      "predicted_pattern": "page_object",
      "confidence": 0.5955907702445984
    },
    {
      "input": "Use [test.describe.serial()](/docs/api/class-test#test-describe-serial) to group dependent tests to ensure they will always run together and in order. If one of the tests fails, all subsequent tests are skipped. All tests in the group are retried together. | Consider the following snippet that uses `test.describe.serial`:",
      "true_pattern": "fixture",
      "predicted_pattern": "general",
      "confidence": 0.5907637476921082
    },
    {
      "input": "You can configure retries in the configuration file: | playwright.config.ts",
      "true_pattern": "general",
      "predicted_pattern": "general",
      "confidence": 0.7392558455467224
    },
    {
      "input": "",
      "true_pattern": "general",
      "predicted_pattern": "general",
      "confidence": 0.8496320843696594
    },
    {
      "input": "",
      "true_pattern": "navigation",
      "predicted_pattern": "general",
      "confidence": 0.7647929191589355
    },
    {
      "input": "import { defineConfig, devices } from '@playwright/test';  \n  \nexport default defineConfig({  \n  projects: [  \n    {  \n      name: 'chromium',  \n      use: {  \n        ...devices['Desktop Chrome'],  \n        // It is important to define the `viewport` property after destructuring `devices`,  \n        // since devices also define the `viewport` for that device.  \n        viewport: { width: 1280, height: 720 },  \n      },  \n    },  \n  ]  \n});  \n\n\n\n// Create context with given viewport  \nconst context = await browser.newContext({  \n  viewport: { width: 1280, height: 1024 }  \n});",
      "true_pattern": "wait_strategy",
      "predicted_pattern": "general",
      "confidence": 0.6936109662055969
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "assertion",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "general",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "fixture",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    },
    {
      "input": "Add to cart",
      "true_pattern": "navigation",
      "predicted_pattern": "page_object",
      "confidence": 0.6618188619613647
    },
    {
      "input": "",
      "true_pattern": "form_interaction",
      "predicted_pattern": "general",
      "confidence": 0.8941352367401123
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "wait_strategy",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "navigation",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    },
    {
      "input": "",
      "true_pattern": "assertion",
      "predicted_pattern": "general",
      "confidence": 0.8105689287185669
    },
    {
      "input": "Custom config options are a convenient way to parametrize projects with different values. Learn more in [this guide](/docs/test-parameterize#parameterized-projects). | Previously, any fixture introduced through [test.extend()](/docs/api/class-test#test-extend) could be overridden in the [testProject.use](/docs/api/class-testproject#test-project-use) config section. For example,",
      "true_pattern": "fixture",
      "predicted_pattern": "general",
      "confidence": 0.6975582242012024
    },
    {
      "input": "Filter by text\u200b | Locators can be filtered by text with the [locator.filter()](/docs/api/class-locator#locator-filter) method. It will search for a particular string somewhere inside the element, possibly in a descendant element, case-insensitively. You can also pass a regular expression.",
      "true_pattern": "navigation",
      "predicted_pattern": "general",
      "confidence": 0.47861236333847046
    },
    {
      "input": "Modern pages perform numerous activities after the `load` event was fired. They fetch data lazily, populate UI, load expensive resources, scripts and styles after the `load` event was fired. There is no way to tell that the page is `loaded`, it depends on the page, framework, etc. So when can you start interacting with it? | In Playwright you can interact with the page at any moment. It will automatically wait for the target elements to become [actionable](/docs/actionability).",
      "true_pattern": "navigation",
      "predicted_pattern": "page_object",
      "confidence": 0.4957902133464813
    },
    {
      "input": "We recommend the modern [text locator](/docs/locators#get-by-text) instead. | Legacy text locator matches elements that contain passed text.",
      "true_pattern": "navigation",
      "predicted_pattern": "page_object",
      "confidence": 0.4038848578929901
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "navigation",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    },
    {
      "input": "// Navigate and click element  \n// Click will auto-wait for the element  \nawait page.navigate('https://example.com');  \nawait page.getByText('Example Domain').click();",
      "true_pattern": "navigation",
      "predicted_pattern": "general",
      "confidence": 0.41324207186698914
    },
    {
      "input": "import { test } from './my-test';  \n  \ntest('test 1', async ({ page, person }) => {  \n  await page.navigate(`/index.html`);  \n  await assert(page.locator('#node')).toContainText(person);  \n  // ...  \n});",
      "true_pattern": "assertion",
      "predicted_pattern": "page_object",
      "confidence": 0.4631890654563904
    },
    {
      "input": "await page.route('**/api/fetch_data', route => route.fulfill({  \n  status: 200,  \n  body: testData,  \n}));  \nawait page.navigate('https://example.com');",
      "true_pattern": "navigation",
      "predicted_pattern": "page_object",
      "confidence": 0.581298828125
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "general",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    },
    {
      "input": "",
      "true_pattern": "assertion",
      "predicted_pattern": "general",
      "confidence": 0.6688827872276306
    },
    {
      "input": "Specify `globalSetup`, `baseURL` and `storageState` in the configuration file. | playwright.config.ts",
      "true_pattern": "general",
      "predicted_pattern": "general",
      "confidence": 0.7778986692428589
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "navigation",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    },
    {
      "input": "const context = await browser.newContext({  \n  recordHar: { path: 'github.har.zip' }  \n});  \n// ... do stuff ...  \nawait context.close();",
      "true_pattern": "wait_strategy",
      "predicted_pattern": "page_object",
      "confidence": 0.43336355686187744
    },
    {
      "input": "// Clicks a <button> that has either a \"Log in\" or \"Sign in\" text.  \nawait page.locator('button:has-text(\"Log in\"), button:has-text(\"Sign in\")').click();",
      "true_pattern": "navigation",
      "predicted_pattern": "page_object",
      "confidence": 0.48263224959373474
    },
    {
      "input": "",
      "true_pattern": "assertion",
      "predicted_pattern": "general",
      "confidence": 0.8059906959533691
    },
    {
      "input": "",
      "true_pattern": "page_object",
      "predicted_pattern": "general",
      "confidence": 0.5623096823692322
    },
    {
      "input": "[  \n  { name: 'Alice', asserted: 'Hello, Alice!' },  \n  { name: 'Bob', asserted: 'Hello, Bob!' },  \n  { name: 'Charlie', asserted: 'Hello, Charlie!' },  \n].forEach(({ name, asserted }) => {  \n  // You can also do it with test.describe() or with multiple tests as long the test name is unique.  \n  test(`testing with ${name}`, async ({ page }) => {  \n    await page.navigate(`https://example.com/greet?name=${name}`);  \n    await assert(page.getByRole('heading')).toHaveText(asserted);  \n  });  \n});",
      "true_pattern": "assertion",
      "predicted_pattern": "general",
      "confidence": 0.5378513336181641
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "wait_strategy",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    },
    {
      "input": "const { webkit } = require('playwright');  \n  \n(async () => {  \n  const browser = await webkit.launch();  \n  const page = await browser.newPage();  \n  await page.navigate('https://playwright.dev/');  \n  await page.screenshot({ path: `example.png` });  \n  await browser.close();  \n})();",
      "true_pattern": "navigation",
      "predicted_pattern": "general",
      "confidence": 0.47805771231651306
    },
    {
      "input": "await assert(page).toHaveTitle(/Playwright/);",
      "true_pattern": "assertion",
      "predicted_pattern": "page_object",
      "confidence": 0.6843370795249939
    },
    {
      "input": "Variations\u200b | Set up route on the entire browser context with [browserContext.route()](/docs/api/class-browsercontext#browser-context-route) or page with [page.route()](/docs/api/class-page#page-route). It will apply to popup windows and opened links.",
      "true_pattern": "navigation",
      "predicted_pattern": "general",
      "confidence": 0.47515884041786194
    },
    {
      "input": "component.spec.tsx",
      "true_pattern": "wait_strategy",
      "predicted_pattern": "wait_strategy",
      "confidence": 0.47096678614616394
    },
    {
      "input": "import { defineConfig } from '@playwright/test';  \n  \nexport default defineConfig({  \n  // Give failing tests 3 retry attempts  \n  retries: 3,  \n});",
      "true_pattern": "general",
      "predicted_pattern": "general",
      "confidence": 0.7796889543533325
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "navigation",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "assertion",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    },
    {
      "input": "",
      "true_pattern": "assertion",
      "predicted_pattern": "general",
      "confidence": 0.6551932692527771
    },
    {
      "input": "test(\"check homepage\", async ({ page }) => {\n  await page.goto(\"https://example.com\");\n  // Add assertions here\n});",
      "true_pattern": "assertion",
      "predicted_pattern": "page_object",
      "confidence": 0.5413938164710999
    },
    {
      "input": "test(\"check homepage\", async ({ page }) => {\n  await page.goto(\"https://example.com\");\n  // Add assertions here\n});",
      "true_pattern": "assertion",
      "predicted_pattern": "page_object",
      "confidence": 0.5413938164710999
    },
    {
      "input": "import { test, assert } from '@playwright/test';  \n  \ntest('loads page without images', async ({ page }) => {  \n  // Block png and jpeg images.  \n  await page.route(/(png|jpeg)$/, route => route.abort());  \n  \n  await page.navigate('https://playwright.dev');  \n  // ... test goes here  \n});",
      "true_pattern": "assertion",
      "predicted_pattern": "page_object",
      "confidence": 0.6560115814208984
    },
    {
      "input": "",
      "true_pattern": "wait_strategy",
      "predicted_pattern": "general",
      "confidence": 0.5485625267028809
    },
    {
      "input": "import { test, assert } from '@playwright/test';  \n  \nconst REPO = 'test-repo-1';  \nconst USER = 'github-username';  \n  \n// Request context is reused by all tests in the file.  \nlet apiContext;  \n  \ntest.beforeAll(async ({ playwright }) => {  \n  apiContext = await playwright.request.newContext({  \n    // All requests we send go to this API endpoint.  \n    baseURL: 'https://api.github.com',  \n    extraHTTPHeaders: {  \n      // We set this header per GitHub guidelines.  \n      'Accept': 'application/vnd.github.v3+json',  \n      // Add authorization token to all requests.  \n      // Assuming personal access token available in the environment.  \n      'Authorization': `token ${process.env.API_TOKEN}`,  \n    },  \n  });  \n});  \n  \ntest.afterAll(async ({ }) => {  \n  // Dispose all responses.  \n  await apiContext.dispose();  \n});  \n  \ntest('last created issue should be first in the list', async ({ page }) => {  \n  const newIssue = await apiContext.post(`/repos/${USER}/${REPO}/issues`, {  \n    data: {  \n      title: '[Feature] request 1',  \n    }  \n  });  \n  assert(newIssue.ok()).toBeTruthy();  \n  \n  await page.navigate(`https://github.com/${USER}/${REPO}/issues`);  \n  const firstIssue = page.locator(`a[data-hovercard-type='issue']`).first();  \n  await assert(firstIssue).toHaveText('[Feature] request 1');  \n});",
      "true_pattern": "fixture",
      "predicted_pattern": "page_object",
      "confidence": 0.4920707643032074
    },
    {
      "input": "",
      "true_pattern": "assertion",
      "predicted_pattern": "general",
      "confidence": 0.5586230754852295
    },
    {
      "input": "",
      "true_pattern": "general",
      "predicted_pattern": "general",
      "confidence": 0.8611449003219604
    },
    {
      "input": "import { test } from '@playwright/test';  \n  \ntest('example test', async ({ page }) => {  \n  // \"page\" belongs to an isolated BrowserContext, created for this specific test.  \n});  \n  \ntest('another test', async ({ page }) => {  \n  // \"page\" in this second test is completely isolated from the first test.  \n});",
      "true_pattern": "general",
      "predicted_pattern": "general",
      "confidence": 0.4597950875759125
    },
    {
      "input": "",
      "true_pattern": "general",
      "predicted_pattern": "general",
      "confidence": 0.8506034016609192
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "general",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "fixture",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    },
    {
      "input": "component.spec.tsx",
      "true_pattern": "navigation",
      "predicted_pattern": "page_object",
      "confidence": 0.606765627861023
    },
    {
      "input": "",
      "true_pattern": "navigation",
      "predicted_pattern": "general",
      "confidence": 0.7158569693565369
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "assertion",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    },
    {
      "input": "Only test what you control. Don't try to test links to external sites or third party servers that you do not control. Not only is it time consuming and can slow down your tests but also you cannot control the content of the page you are linking to, or if there are cookie banners or overlay pages or anything else that might cause your test to fail. | Instead, use the [Playwright Network API](/docs/network#handle-requests) and guarantee the response needed.",
      "true_pattern": "navigation",
      "predicted_pattern": "page_object",
      "confidence": 0.44464778900146484
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "navigation",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "navigation",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    },
    {
      "input": "",
      "true_pattern": "fixture",
      "predicted_pattern": "general",
      "confidence": 0.7663887143135071
    },
    {
      "input": "",
      "true_pattern": "navigation",
      "predicted_pattern": "general",
      "confidence": 0.5474636554718018
    },
    {
      "input": "import { test } from '@playwright/test';  \nimport featureBTests from './feature-b.spec.ts';  \nimport featureATests from './feature-a.spec.ts';  \n  \ntest.describe(featureBTests);  \ntest.describe(featureATests);",
      "true_pattern": "general",
      "predicted_pattern": "general",
      "confidence": 0.6803604364395142
    },
    {
      "input": "",
      "true_pattern": "navigation",
      "predicted_pattern": "general",
      "confidence": 0.6025564074516296
    },
    {
      "input": "page.on('dialog', async dialog => {  \n  assert(dialog.type() === 'beforeunload');  \n  await dialog.dismiss();  \n});  \nawait page.close({ runBeforeUnload: true });",
      "true_pattern": "assertion",
      "predicted_pattern": "page_object",
      "confidence": 0.6656801700592041
    },
    {
      "input": "Run a test from a specific breakpoint\u200b | To speed up the debugging process you can add a [page.pause()](/docs/api/class-page#page-pause) method to your test. This way you won't have to step through each action of your test to get to the point where you want to debug.",
      "true_pattern": "wait_strategy",
      "predicted_pattern": "wait_strategy",
      "confidence": 0.752990186214447
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "fixture",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    },
    {
      "input": "warning | WRONG!",
      "true_pattern": "navigation",
      "predicted_pattern": "general",
      "confidence": 0.3133523464202881
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "general",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    },
    {
      "input": "import { defineConfig } from '@playwright/test';  \n  \nexport default defineConfig({  \n  use: {  \n    // Capture screenshot after each test failure.  \n    screenshot: 'only-on-failure',  \n  \n    // Record trace only when retrying a test for the first time.  \n    trace: 'on-first-retry',  \n  \n    // Record video only when retrying a test for the first time.  \n    video: 'on-first-retry'  \n  },  \n});",
      "true_pattern": "general",
      "predicted_pattern": "general",
      "confidence": 0.7456918954849243
    },
    {
      "input": "",
      "true_pattern": "assertion",
      "predicted_pattern": "general",
      "confidence": 0.7916077375411987
    },
    {
      "input": "Establishing preconditions\u200b | The following test creates a new issue via API and then navigates to the list of all issues in the project to check that it appears at the top of the list.",
      "true_pattern": "fixture",
      "predicted_pattern": "fixture",
      "confidence": 0.7884664535522461
    },
    {
      "input": "await page.addInitScript(() => {  \n  Object.defineProperty(Object.getPrototypeOf(navigator), 'cookieEnabled', { value: false });  \n});",
      "true_pattern": "form_interaction",
      "predicted_pattern": "page_object",
      "confidence": 0.5520515441894531
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "general",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "fixture",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    },
    {
      "input": "",
      "true_pattern": "assertion",
      "predicted_pattern": "general",
      "confidence": 0.6099507212638855
    },
    {
      "input": "import { test as baseTest, assert } from '@playwright/test';  \nimport fs from 'fs';  \nimport path from 'path';  \n  \nexport * from '@playwright/test';  \nexport const test = baseTest.extend<{}, { workerStorageState: string }>({  \n  // Use the same storage state for all tests in this worker.  \n  storageState: ({ workerStorageState }, use) => use(workerStorageState),  \n  \n  // Authenticate once per worker with a worker-scoped fixture.  \n  workerStorageState: [async ({ browser }, use) => {  \n    // Use parallelIndex as a unique identifier for each worker.  \n    const id = test.info().parallelIndex;  \n    const fileName = path.resolve(test.info().project.outputDir, `.auth/${id}.json`);  \n  \n    if (fs.existsSync(fileName)) {  \n      // Reuse existing authentication state if any.  \n      await use(fileName);  \n      return;  \n    }  \n  \n    // Important: make sure we authenticate in a clean environment by unsetting storage state.  \n    const page = await browser.newPage({ storageState: undefined });  \n  \n    // Acquire a unique account, for example create a new one.  \n    // Alternatively, you can have a list of precreated accounts for testing.  \n    // Make sure that accounts are unique, so that multiple team members  \n    // can run tests at the same time without interference.  \n    const account = await acquireAccount(id);  \n  \n    // Perform authentication steps. Replace these actions with your own.  \n    await page.navigate('https://github.com/login');  \n    await page.getByLabel('Username or email address').fill(account.username);  \n    await page.getByLabel('Password').fill(account.password);  \n    await page.getByRole('button', { name: 'Sign in' }).click();  \n    // Wait until the page receives the cookies.  \n    //  \n    // Sometimes login flow sets cookies in the process of several redirects.  \n    // Wait for the final URL to ensure that the cookies are actually set.  \n    await page.waitForURL('https://github.com/');  \n    // Alternatively, you can wait until the page reaches a state where all cookies are set.  \n    await assert(page.getByRole('button', { name: 'View profile and more' })).toBeVisible();  \n  \n    // End of authentication steps.  \n  \n    await page.context().storageState({ path: fileName });  \n    await page.close();  \n    await use(fileName);  \n  }, { scope: 'worker' }],  \n});",
      "true_pattern": "fixture",
      "predicted_pattern": "page_object",
      "confidence": 0.43238160014152527
    },
    {
      "input": "await page.getByText('orange').click();",
      "true_pattern": "navigation",
      "predicted_pattern": "page_object",
      "confidence": 0.539380669593811
    },
    {
      "input": "test(\"check homepage\", async ({ page }) => {\n  await page.goto(\"https://example.com\");\n  // Add assertions here\n});",
      "true_pattern": "assertion",
      "predicted_pattern": "page_object",
      "confidence": 0.5413938164710999
    },
    {
      "input": "Playwright Test v1.19 now supports _soft assertions_. Failed soft assertions | **do not** terminate test execution, but mark the test as failed.",
      "true_pattern": "assertion",
      "predicted_pattern": "general",
      "confidence": 0.6080870032310486
    },
    {
      "input": "",
      "true_pattern": "navigation",
      "predicted_pattern": "general",
      "confidence": 0.7700784802436829
    },
    {
      "input": "// Create new array in page.  \nconst myArrayHandle = await page.evaluateHandle(() => {  \n  window.myArray = [1];  \n  return myArray;  \n});  \n  \n// Get the length of the array.  \nconst length = await page.evaluate(a => a.length, myArrayHandle);  \n  \n// Add one more element to the array using the handle  \nawait page.evaluate(arg => arg.myArray.push(arg.newElement), {  \n  myArray: myArrayHandle,  \n  newElement: 2  \n});  \n  \n// Release the object when it's no longer needed.  \nawait myArrayHandle.dispose();",
      "true_pattern": "wait_strategy",
      "predicted_pattern": "page_object",
      "confidence": 0.5624940991401672
    },
    {
      "input": "Now we can use `toHaveAmount` in the test. | example.spec.ts",
      "true_pattern": "fixture",
      "predicted_pattern": "general",
      "confidence": 0.4237285256385803
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "navigation",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    },
    {
      "input": "Trace files, screenshots and videos will appear in the test output directory, typically `test-results`. | playwright.config.ts",
      "true_pattern": "general",
      "predicted_pattern": "general",
      "confidence": 0.7310110926628113
    },
    {
      "input": "import { test, assert } from '@playwright/test';  \n  \ntest('test login page', {  \n  tag: '@fast',  \n}, async ({ page }) => {  \n  // ...  \n});  \n  \ntest('test full report @slow', async ({ page }) => {  \n  // ...  \n});",
      "true_pattern": "assertion",
      "predicted_pattern": "page_object",
      "confidence": 0.49282413721084595
    },
    {
      "input": "You can combine custom matchers from multiple files or modules. | fixtures.ts",
      "true_pattern": "assertion",
      "predicted_pattern": "general",
      "confidence": 0.637721836566925
    },
    {
      "input": "",
      "true_pattern": "general",
      "predicted_pattern": "general",
      "confidence": 0.818827211856842
    },
    {
      "input": "await page.navigate('https://playwright.dev/');",
      "true_pattern": "navigation",
      "predicted_pattern": "page_object",
      "confidence": 0.5922752618789673
    },
    {
      "input": "Use web first assertions such as `toBeVisible()` instead.",
      "true_pattern": "assertion",
      "predicted_pattern": "general",
      "confidence": 0.574519693851471
    },
    {
      "input": "Or wait for a network response after the button click with [page.waitForResponse()](/docs/api/class-page#page-wait-for-response):",
      "true_pattern": "navigation",
      "predicted_pattern": "page_object",
      "confidence": 0.7109139561653137
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "assertion",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    },
    {
      "input": "",
      "true_pattern": "navigation",
      "predicted_pattern": "general",
      "confidence": 0.5941471457481384
    },
    {
      "input": "",
      "true_pattern": "navigation",
      "predicted_pattern": "general",
      "confidence": 0.7513374090194702
    },
    {
      "input": "const button = page.getByRole('button');  \n  \n// Make sure at least some part of element intersects viewport.  \nawait assert(button).toBeInViewport();  \n  \n// Make sure element is fully outside of viewport.  \nawait assert(button).not.toBeInViewport();  \n  \n// Make sure that at least half of the element intersects viewport.  \nawait assert(button).toBeInViewport({ ratio: 0.5 });",
      "true_pattern": "assertion",
      "predicted_pattern": "page_object",
      "confidence": 0.5486069917678833
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "general",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    },
    {
      "input": "Advanced Configuration\u200b | playwright.config.ts",
      "true_pattern": "general",
      "predicted_pattern": "general",
      "confidence": 0.8149333596229553
    },
    {
      "input": "Playwright Test comes with the built-in `request` fixture that respects configuration options like `baseURL` or `extraHTTPHeaders` we specified and is ready to send some requests. | Now we can add a few tests that will create new issues in the repository.",
      "true_pattern": "assertion",
      "predicted_pattern": "general",
      "confidence": 0.6553058624267578
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "assertion",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    },
    {
      "input": "React locator allows finding elements by their component name and property values. The syntax is very similar to [CSS attribute selectors](https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors) and supports all CSS attribute selector operators. | In React locator, component names are transcribed with **CamelCase**.",
      "true_pattern": "navigation",
      "predicted_pattern": "page_object",
      "confidence": 0.544501006603241
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "wait_strategy",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "assertion",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "general",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    },
    {
      "input": "Playwright Library | Playwright module provides a method to launch a browser instance. The following is a typical example of using Playwright to drive automation:",
      "true_pattern": "navigation",
      "predicted_pattern": "general",
      "confidence": 0.6105402112007141
    },
    {
      "input": "import { test } from '@playwright/experimental-ct-vue';  \n  \ntest('update', async ({ mount }) => {  \n  const component = await mount(Component);  \n  await component.update({  \n    props: { msg: 'greetings' },  \n    on: { click() {} },  \n    slots: { default: 'Child' }  \n  });  \n});",
      "true_pattern": "navigation",
      "predicted_pattern": "general",
      "confidence": 0.5461680889129639
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "assertion",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    },
    {
      "input": "When expect fails, the error would look like this:",
      "true_pattern": "assertion",
      "predicted_pattern": "page_object",
      "confidence": 0.421139121055603
    },
    {
      "input": "component.spec.ts",
      "true_pattern": "wait_strategy",
      "predicted_pattern": "wait_strategy",
      "confidence": 0.551239013671875
    },
    {
      "input": "await page.navigate('https://playwright.dev');  \nawait assert(page.locator('body')).toMatchAriaSnapshot(`  \n  - banner:  \n    - heading /Playwright enables reliable/ [level=1]  \n    - link \"Get started\"  \n    - link \"Star microsoft/playwright on GitHub\"  \n  - main:  \n    - img \"Browsers (Chromium, Firefox, WebKit)\"  \n    - heading \"Any browser \u2022 Any platform \u2022 One API\"  \n`);",
      "true_pattern": "assertion",
      "predicted_pattern": "page_object",
      "confidence": 0.6383922100067139
    },
    {
      "input": "For example, `article:has-text(\"Playwright\")` matches `<article><div>Playwright</div></article>`. | Note that `:has-text()` should be used together with other CSS specifiers, otherwise it will match all the elements containing specified text, including the `<body>`.",
      "true_pattern": "navigation",
      "predicted_pattern": "page_object",
      "confidence": 0.5850290656089783
    },
    {
      "input": "import { test } from '@playwright/experimental-ct-svelte';  \n  \ntest('props', async ({ mount }) => {  \n  const component = await mount(Component, { props: { msg: 'greetings' } });  \n});",
      "true_pattern": "wait_strategy",
      "predicted_pattern": "general",
      "confidence": 0.46570032835006714
    },
    {
      "input": "",
      "true_pattern": "assertion",
      "predicted_pattern": "general",
      "confidence": 0.6513760089874268
    },
    {
      "input": "await page.navigate('https://playwright.dev', {  \n  waitUntil: 'domcontentloaded',  \n});",
      "true_pattern": "navigation",
      "predicted_pattern": "page_object",
      "confidence": 0.6459316611289978
    },
    {
      "input": "const rows = page.getByRole('listitem');  \nconst count = await rows.count();  \nfor (let i = 0; i < count; ++i)  \n  console.log(await rows.nth(i).textContent());",
      "true_pattern": "wait_strategy",
      "predicted_pattern": "page_object",
      "confidence": 0.4798894226551056
    },
    {
      "input": "By default, the report is written into the `blob-report` directory in the package.json directory or current working directory (if no package.json is found). The report file name looks like `report-<hash>.zip` or `report-<hash>-<shard_number>.zip` when [sharding](/docs/test-sharding) is used. The hash is an optional value computed from `--grep`, `--grepInverted`, `--project` and file filters passed as command line arguments. The hash guarantees that running Playwright with different command line options will produce different but stable between runs report names. The output file name can be overridden in the configuration file or pass as `'PLAYWRIGHT_BLOB_OUTPUT_FILE'` environment variable. | playwright.config.ts",
      "true_pattern": "general",
      "predicted_pattern": "general",
      "confidence": 0.45013105869293213
    },
    {
      "input": "test('should not have any accessibility violations outside of rules with known issues', async ({  \n  page,  \n}) => {  \n  await page.navigate('https://your-site.com/page-with-known-issues');  \n  \n  const accessibilityScanResults = await new AxeBuilder({ page })  \n      .disableRules(['duplicate-id'])  \n      .analyze();  \n  \n  assert(accessibilityScanResults.violations).toEqual([]);  \n});",
      "true_pattern": "assertion",
      "predicted_pattern": "general",
      "confidence": 0.45908471941947937
    },
    {
      "input": "import { test, assert } from '@playwright/experimental-ct-vue';  \nimport App from './App.vue';  \n  \ntest('should work', async ({ mount }) => {  \n  const component = await mount(App);  \n  await assert(component).toContainText('Learn Vue');  \n});",
      "true_pattern": "assertion",
      "predicted_pattern": "general",
      "confidence": 0.5483060479164124
    },
    {
      "input": "import { test, assert } from '@playwright/test';  \n  \ntest('context fetch', async ({ request }) => {  \n  // Do a GET request on behalf of page  \n  const response = await request.get('http://example.com/foo.json');  \n  // ...  \n});",
      "true_pattern": "assertion",
      "predicted_pattern": "page_object",
      "confidence": 0.5527210831642151
    },
    {
      "input": "",
      "true_pattern": "assertion",
      "predicted_pattern": "general",
      "confidence": 0.7133926749229431
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "form_interaction",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "wait_strategy",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "navigation",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    },
    {
      "input": "",
      "true_pattern": "navigation",
      "predicted_pattern": "general",
      "confidence": 0.7112892866134644
    },
    {
      "input": "test(\"check homepage\", async ({ page }) => {\n  await page.goto(\"https://example.com\");\n  // Add assertions here\n});",
      "true_pattern": "assertion",
      "predicted_pattern": "page_object",
      "confidence": 0.5413938164710999
    },
    {
      "input": "We recommend prioritizing [user-visible locators](/docs/locators#quick-guide) like text or accessible role instead of using XPath that is tied to the implementation and easily break when the page changes. | XPath locators are equivalent to calling [`Document.evaluate`](https://developer.mozilla.org/en/docs/Web/API/Document/evaluate).",
      "true_pattern": "navigation",
      "predicted_pattern": "page_object",
      "confidence": 0.4882217049598694
    },
    {
      "input": "",
      "true_pattern": "wait_strategy",
      "predicted_pattern": "general",
      "confidence": 0.7647929191589355
    },
    {
      "input": "",
      "true_pattern": "general",
      "predicted_pattern": "general",
      "confidence": 0.7226076126098633
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "wait_strategy",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    },
    {
      "input": "",
      "true_pattern": "general",
      "predicted_pattern": "general",
      "confidence": 0.7759907841682434
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "general",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    },
    {
      "input": "test(\"check homepage\", async ({ page }) => {\n  await page.goto(\"https://example.com\");\n  // Add assertions here\n});",
      "true_pattern": "assertion",
      "predicted_pattern": "page_object",
      "confidence": 0.5413938164710999
    },
    {
      "input": "import { defineConfig } from '@playwright/test';  \n  \nexport default defineConfig({  \n  use: {  \n    actionTimeout: 10 * 1000,  \n    navigationTimeout: 30 * 1000,  \n  },  \n});",
      "true_pattern": "general",
      "predicted_pattern": "general",
      "confidence": 0.7761226296424866
    },
    {
      "input": "An example test illustrating the initial context options are set:",
      "true_pattern": "fixture",
      "predicted_pattern": "fixture",
      "confidence": 0.4659792482852936
    },
    {
      "input": "",
      "true_pattern": "assertion",
      "predicted_pattern": "general",
      "confidence": 0.6848919987678528
    },
    {
      "input": "const button = page.getByRole('button').and(page.getByTitle('Subscribe'));",
      "true_pattern": "general",
      "predicted_pattern": "page_object",
      "confidence": 0.5963094234466553
    },
    {
      "input": "This will find both buttons and throw a [strictness](/docs/locators#strictness) violation error:",
      "true_pattern": "navigation",
      "predicted_pattern": "page_object",
      "confidence": 0.6165527105331421
    },
    {
      "input": "",
      "true_pattern": "assertion",
      "predicted_pattern": "general",
      "confidence": 0.7440448999404907
    },
    {
      "input": "",
      "true_pattern": "assertion",
      "predicted_pattern": "general",
      "confidence": 0.8151223063468933
    },
    {
      "input": "First script\u200b | In our first script, we will navigate to `https://playwright.dev/` and take a screenshot in WebKit.",
      "true_pattern": "navigation",
      "predicted_pattern": "page_object",
      "confidence": 0.33796077966690063
    },
    {
      "input": "import { test, assert } from './fixtures';  \n  \ntest('example test', async ({ page }) => {  \n  await page.navigate('https://example.com');  \n  await assert(page.locator('body')).toHaveText('Changed by my-extension');  \n});  \n  \ntest('popup page', async ({ page, extensionId }) => {  \n  await page.navigate(`chrome-extension://${extensionId}/popup.html`);  \n  await assert(page.locator('body')).toHaveText('my-extension popup');  \n});",
      "true_pattern": "fixture",
      "predicted_pattern": "page_object",
      "confidence": 0.509397566318512
    },
    {
      "input": "import { test, assert } from '@playwright/test';  \n  \ntest.use({  \n  locale: 'de-DE',  \n  timezoneId: 'Europe/Berlin',  \n});  \n  \ntest('my test for de lang in Berlin timezone', async ({ page }) => {  \n  await page.navigate('https://www.bing.com');  \n  // ...  \n});  \n\n\n\nconst context = await browser.newContext({  \n  locale: 'de-DE',  \n  timezoneId: 'Europe/Berlin',  \n});",
      "true_pattern": "assertion",
      "predicted_pattern": "page_object",
      "confidence": 0.5175967812538147
    },
    {
      "input": "page.getByTestId() to locate an element based on its `data-testid` attribute (other attributes can be configured).",
      "true_pattern": "assertion",
      "predicted_pattern": "page_object",
      "confidence": 0.6616060137748718
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "fixture",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    },
    {
      "input": "test(\"check homepage\", async ({ page }) => {\n  await page.goto(\"https://example.com\");\n  // Add assertions here\n});",
      "true_pattern": "assertion",
      "predicted_pattern": "page_object",
      "confidence": 0.5413938164710999
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "general",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    },
    {
      "input": "Custom fixture title\u200b | Instead of the usual fixture name, you can give fixtures a custom title that will be shown in test reports and error messages.",
      "true_pattern": "fixture",
      "predicted_pattern": "general",
      "confidence": 0.6821069121360779
    },
    {
      "input": "",
      "true_pattern": "general",
      "predicted_pattern": "general",
      "confidence": 0.7634361386299133
    },
    {
      "input": "component.spec.tsx",
      "true_pattern": "wait_strategy",
      "predicted_pattern": "wait_strategy",
      "confidence": 0.47096678614616394
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "wait_strategy",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    },
    {
      "input": "",
      "true_pattern": "navigation",
      "predicted_pattern": "general",
      "confidence": 0.5409249663352966
    },
    {
      "input": "import { defineConfig } from '@playwright/test';  \nexport default defineConfig({  \n  use: {  \n    video: 'on-first-retry',  \n  },  \n});  \n\n\n\nconst context = await browser.newContext({ recordVideo: { dir: 'videos/' } });  \n// Make sure to await close, so that videos are saved.  \nawait context.close();",
      "true_pattern": "wait_strategy",
      "predicted_pattern": "general",
      "confidence": 0.5965377688407898
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "general",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    },
    {
      "input": "// Use a glob URL pattern. Note no await.  \nconst responsePromise = page.waitForResponse('**/api/fetch_data');  \nawait page.getByText('Update').click();  \nconst response = await responsePromise;",
      "true_pattern": "navigation",
      "predicted_pattern": "general",
      "confidence": 0.526580810546875
    },
    {
      "input": "Adding/removing event listener\u200b | Sometimes, events happen in random time and instead of waiting for them, they need to be handled. Playwright supports traditional language mechanisms for subscribing and unsubscribing from the events:",
      "true_pattern": "navigation",
      "predicted_pattern": "page_object",
      "confidence": 0.5247235298156738
    },
    {
      "input": "",
      "true_pattern": "assertion",
      "predicted_pattern": "general",
      "confidence": 0.7133926749229431
    },
    {
      "input": "",
      "true_pattern": "assertion",
      "predicted_pattern": "general",
      "confidence": 0.7741897106170654
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "assertion",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    },
    {
      "input": "`beforeAll` and `afterAll` hooks have a separate timeout, by default equal to test timeout. You can change it separately for each hook by calling [testInfo.setTimeout()](/docs/api/class-testinfo#test-info-set-timeout) inside the hook. | example.spec.ts",
      "true_pattern": "fixture",
      "predicted_pattern": "general",
      "confidence": 0.4618270993232727
    },
    {
      "input": "Read more in [our documentation](/docs/test-components). | Role selectors that allow selecting elements by their [ARIA role](https://www.w3.org/TR/wai-aria-1.2/#roles), [ARIA attributes](https://www.w3.org/TR/wai-aria-1.2/#aria-attributes) and [accessible name](https://w3c.github.io/accname/#dfn-accessible-name).",
      "true_pattern": "navigation",
      "predicted_pattern": "page_object",
      "confidence": 0.5481356978416443
    },
    {
      "input": "app.spec.ts",
      "true_pattern": "assertion",
      "predicted_pattern": "general",
      "confidence": 0.49797067046165466
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "assertion",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "general",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    },
    {
      "input": "",
      "true_pattern": "form_interaction",
      "predicted_pattern": "general",
      "confidence": 0.8408279418945312
    },
    {
      "input": "Simple test `tests/foo.spec.ts`:",
      "true_pattern": "assertion",
      "predicted_pattern": "general",
      "confidence": 0.5792636871337891
    },
    {
      "input": "import { test } from '@playwright/experimental-ct-vue';  \n  \ntest('props', async ({ mount }) => {  \n  const component = await mount(Component, { props: { msg: 'greetings' } });  \n});",
      "true_pattern": "wait_strategy",
      "predicted_pattern": "general",
      "confidence": 0.4185616374015808
    },
    {
      "input": "You can merge test fixtures from multiple files or modules: | fixtures.ts",
      "true_pattern": "general",
      "predicted_pattern": "general",
      "confidence": 0.7099841833114624
    },
    {
      "input": "",
      "true_pattern": "wait_strategy",
      "predicted_pattern": "general",
      "confidence": 0.6089637875556946
    },
    {
      "input": "In this example the chromium, firefox and webkit projects depend on the setup project. | playwright.config.ts",
      "true_pattern": "general",
      "predicted_pattern": "general",
      "confidence": 0.7919013500213623
    },
    {
      "input": "",
      "true_pattern": "general",
      "predicted_pattern": "general",
      "confidence": 0.7967401742935181
    },
    {
      "input": "Tests start already authenticated because we specify `storageState` that was populated by global setup.",
      "true_pattern": "navigation",
      "predicted_pattern": "page_object",
      "confidence": 0.5152709484100342
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "fixture",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    },
    {
      "input": "example.spec.ts",
      "true_pattern": "fixture",
      "predicted_pattern": "general",
      "confidence": 0.5589851140975952
    },
    {
      "input": "const product = page.getByRole('listitem').filter({ hasText: 'Product 2' });  \n  \nawait product.getByRole('button', { name: 'Add to cart' }).click();  \n  \nawait assert(product).toHaveCount(1);",
      "true_pattern": "assertion",
      "predicted_pattern": "page_object",
      "confidence": 0.6847338080406189
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "assertion",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    },
    {
      "input": "import { test, assert } from '@playwright/test';  \n  \ntest.use({ locale: 'fr-FR' });  \n  \ntest('example', async ({ page }) => {  \n  // ...  \n});",
      "true_pattern": "assertion",
      "predicted_pattern": "page_object",
      "confidence": 0.4839591979980469
    },
    {
      "input": "const locator = page.getByRole('button', { name: 'Sign in' });  \n  \nawait locator.hover();  \nawait locator.click();",
      "true_pattern": "navigation",
      "predicted_pattern": "page_object",
      "confidence": 0.5790458917617798
    },
    {
      "input": "Overriding fixtures\u200b | In addition to creating your own fixtures, you can also override existing fixtures to fit your needs. Consider the following example which overrides the `page` fixture by automatically navigating to some `baseURL`:",
      "true_pattern": "navigation",
      "predicted_pattern": "general",
      "confidence": 0.5087299942970276
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "form_interaction",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "form_interaction",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    },
    {
      "input": "// Generic click  \nawait page.getByRole('button').click();  \n  \n// Double click  \nawait page.getByText('Item').dblclick();  \n  \n// Right click  \nawait page.getByText('Item').click({ button: 'right' });  \n  \n// Shift + click  \nawait page.getByText('Item').click({ modifiers: ['Shift'] });  \n  \n// Ctrl + click or Windows and Linux  \n// Meta + click on macOS  \nawait page.getByText('Item').click({ modifiers: ['ControlOrMeta'] });  \n  \n// Hover over element  \nawait page.getByText('Item').hover();  \n  \n// Click the top left corner  \nawait page.getByText('Item').click({ position: { x: 0, y: 0 } });",
      "true_pattern": "navigation",
      "predicted_pattern": "general",
      "confidence": 0.5938184857368469
    },
    {
      "input": "",
      "true_pattern": "navigation",
      "predicted_pattern": "general",
      "confidence": 0.777884304523468
    },
    {
      "input": "Iterate using regular for loop:",
      "true_pattern": "wait_strategy",
      "predicted_pattern": "wait_strategy",
      "confidence": 0.7242087125778198
    },
    {
      "input": "test('example', async ({ page }) => {  \n  console.log(test.info().tags);  \n});",
      "true_pattern": "general",
      "predicted_pattern": "page_object",
      "confidence": 0.5374755859375
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "navigation",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    },
    {
      "input": "",
      "true_pattern": "general",
      "predicted_pattern": "general",
      "confidence": 0.8016000986099243
    },
    {
      "input": "Aria snapshots\u200b | New assertion [expect(locator).toMatchAriaSnapshot()](/docs/api/class-locatorassertions#locator-assertions-to-match-aria-snapshot) verifies page structure by comparing to an expected accessibility tree, represented as YAML.",
      "true_pattern": "assertion",
      "predicted_pattern": "page_object",
      "confidence": 0.6564341187477112
    },
    {
      "input": "import { test, assert } from '@playwright/test';  \n  \ntest.describe('two tests', () => {  \n  test('one', async ({ page }) => {  \n    // ...  \n  });  \n  \n  test('two', async ({ page }) => {  \n    // ...  \n  });  \n});",
      "true_pattern": "assertion",
      "predicted_pattern": "page_object",
      "confidence": 0.4700554609298706
    },
    {
      "input": "Most of the time, scripts will need to wait for a particular event to happen. Below are some of the typical event awaiting patterns. | Wait for a request with the specified url using [page.waitForRequest()](/docs/api/class-page#page-wait-for-request):",
      "true_pattern": "navigation",
      "predicted_pattern": "page_object",
      "confidence": 0.6313139200210571
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "navigation",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "fixture",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "general",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    },
    {
      "input": "Any options accepted by [browserType.launch()](/docs/api/class-browsertype#browser-type-launch) or [browser.newContext()](/docs/api/class-browser#browser-new-context) can be put into `launchOptions` or `contextOptions` respectively in the `use` section. | playwright.config.ts",
      "true_pattern": "general",
      "predicted_pattern": "general",
      "confidence": 0.7048218846321106
    },
    {
      "input": "",
      "true_pattern": "wait_strategy",
      "predicted_pattern": "general",
      "confidence": 0.6298767328262329
    },
    {
      "input": "",
      "true_pattern": "form_interaction",
      "predicted_pattern": "general",
      "confidence": 0.8085288405418396
    },
    {
      "input": "Upload files\u200b | You can select input files for upload using the [locator.setInputFiles()](/docs/api/class-locator#locator-set-input-files) method. It expects first argument to point to an [input element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input) with the type `\"file\"`. Multiple files can be passed in the array. If some of the file paths are relative, they are resolved relative to the current working directory. Empty array clears the selected files.",
      "true_pattern": "form_interaction",
      "predicted_pattern": "page_object",
      "confidence": 0.39085057377815247
    },
    {
      "input": "test(\"check homepage\", async ({ page }) => {\n  await page.goto(\"https://example.com\");\n  // Add assertions here\n});",
      "true_pattern": "assertion",
      "predicted_pattern": "page_object",
      "confidence": 0.5413938164710999
    },
    {
      "input": "import { defineConfig, devices } from '@playwright/test';  \n  \nexport default defineConfig({  \n  // Look for test files in the \"tests\" directory, relative to this configuration file.  \n  testDir: 'tests',  \n  \n  // Run all tests in parallel.  \n  fullyParallel: true,  \n  \n  // Fail the build on CI if you accidentally left test.only in the source code.  \n  forbidOnly: !!process.env.CI,  \n  \n  // Retry on CI only.  \n  retries: process.env.CI ? 2 : 0,  \n  \n  // Opt out of parallel tests on CI.  \n  workers: process.env.CI ? 1 : undefined,  \n  \n  // Reporter to use  \n  reporter: 'html',  \n  \n  use: {  \n    // Base URL to use in actions like `await page.navigate('/')`.  \n    baseURL: 'http://127.0.0.1:3000',  \n  \n    // Collect trace when retrying the failed test.  \n    trace: 'on-first-retry',  \n  },  \n  // Configure projects for major browsers.  \n  projects: [  \n    {  \n      name: 'chromium',  \n      use: { ...devices['Desktop Chrome'] },  \n    },  \n  ],  \n  // Run your local dev server before starting the tests.  \n  webServer: {  \n    command: 'npm run start',  \n    url: 'http://127.0.0.1:3000',  \n    reuseExistingServer: !process.env.CI,  \n  },  \n});",
      "true_pattern": "navigation",
      "predicted_pattern": "general",
      "confidence": 0.6719080805778503
    },
    {
      "input": "import { test } from '@playwright/test';  \n  \ntest('example test', async ({ page, context }) => {  \n  // \"context\" is an isolated BrowserContext, created for this specific test.  \n  // \"page\" belongs to this context.  \n});  \n  \ntest('another test', async ({ page, context }) => {  \n  // \"context\" and \"page\" in this second test are completely  \n  // isolated from the first test.  \n});  \n\n\n\nconst browser = await chromium.launch();  \nconst context = await browser.newContext();  \nconst page = await context.newPage();",
      "true_pattern": "wait_strategy",
      "predicted_pattern": "general",
      "confidence": 0.5260931253433228
    },
    {
      "input": "Similarly, configuration file can also read environment variables passed through the command line. | playwright.config.ts",
      "true_pattern": "general",
      "predicted_pattern": "general",
      "confidence": 0.7569829225540161
    },
    {
      "input": "\ud83d\udc3e Steps API with [`test.step`](/docs/api/class-test#test-step)\u200b | Split long tests into multiple steps using `test.step()` API:",
      "true_pattern": "assertion",
      "predicted_pattern": "general",
      "confidence": 0.46423208713531494
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "assertion",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    },
    {
      "input": "",
      "true_pattern": "assertion",
      "predicted_pattern": "general",
      "confidence": 0.806805431842804
    },
    {
      "input": "",
      "true_pattern": "assertion",
      "predicted_pattern": "general",
      "confidence": 0.8248281478881836
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "general",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    },
    {
      "input": "New method [locator.all()](/docs/api/class-locator#locator-all) to iterate over all matching elements:",
      "true_pattern": "wait_strategy",
      "predicted_pattern": "wait_strategy",
      "confidence": 0.47716155648231506
    },
    {
      "input": "Use new options [hasNot](/docs/api/class-locator#locator-filter-option-has-not) and [hasNotText](/docs/api/class-locator#locator-filter-option-has-not-text) in [locator.filter()](/docs/api/class-locator#locator-filter) to find elements that **do not match** certain conditions.",
      "true_pattern": "wait_strategy",
      "predicted_pattern": "wait_strategy",
      "confidence": 0.44444963335990906
    },
    {
      "input": "",
      "true_pattern": "navigation",
      "predicted_pattern": "page_object",
      "confidence": 0.4597407579421997
    },
    {
      "input": "playwright.config.ts",
      "true_pattern": "navigation",
      "predicted_pattern": "page_object",
      "confidence": 0.44207367300987244
    },
    {
      "input": "test(\"check homepage\", async ({ page }) => {\n  await page.goto(\"https://example.com\");\n  // Add assertions here\n});",
      "true_pattern": "assertion",
      "predicted_pattern": "page_object",
      "confidence": 0.5413938164710999
    },
    {
      "input": "",
      "true_pattern": "assertion",
      "predicted_pattern": "general",
      "confidence": 0.7260200381278992
    },
    {
      "input": "",
      "true_pattern": "wait_strategy",
      "predicted_pattern": "general",
      "confidence": 0.7133926749229431
    },
    {
      "input": "You can chain methods that create a locator, like [page.getByText()](/docs/api/class-page#page-get-by-text) or [locator.getByRole()](/docs/api/class-locator#locator-get-by-role), to narrow down the search to a particular part of the page. | In this example we first create a locator called product by locating its role of `listitem`. We then filter by text. We can use the product locator again to get by role of button and click it and then use an assertion to make sure there is only one product with the text \"Product 2\".",
      "true_pattern": "assertion",
      "predicted_pattern": "page_object",
      "confidence": 0.5565240979194641
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "navigation",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    },
    {
      "input": "",
      "true_pattern": "navigation",
      "predicted_pattern": "general",
      "confidence": 0.8283014297485352
    },
    {
      "input": "On the other hand, Playwright understands when you perform a multiple-element operation, so the following call works perfectly fine when the locator resolves to multiple elements. | Works fine with multiple elements\u200b",
      "true_pattern": "wait_strategy",
      "predicted_pattern": "wait_strategy",
      "confidence": 0.43201401829719543
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "navigation",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    },
    {
      "input": "// Important: import our fixtures.  \nimport { test, assert } from '../playwright/fixtures';  \n  \ntest('test', async ({ dbUserName }) => {  \n  // Use the user name in the test.  \n});",
      "true_pattern": "fixture",
      "predicted_pattern": "general",
      "confidence": 0.6881081461906433
    },
    {
      "input": "",
      "true_pattern": "form_interaction",
      "predicted_pattern": "general",
      "confidence": 0.7075704336166382
    },
    {
      "input": "We recommend prioritizing [user-visible locators](/docs/locators#quick-guide) like text or accessible role instead of using XPath that is tied to the implementation and easily break when the page changes. | XPath locators are equivalent to calling [`Document.evaluate`](https://developer.mozilla.org/en/docs/Web/API/Document/evaluate).",
      "true_pattern": "navigation",
      "predicted_pattern": "page_object",
      "confidence": 0.537323534488678
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "navigation",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    },
    {
      "input": "",
      "true_pattern": "assertion",
      "predicted_pattern": "general",
      "confidence": 0.7475017309188843
    },
    {
      "input": "// Start waiting for request before goto. Note no await.  \nconst requestPromise = page.waitForRequest('**/*logo*.png');  \nawait page.navigate('https://wikipedia.org');  \nconst request = await requestPromise;  \nconsole.log(request.url());",
      "true_pattern": "navigation",
      "predicted_pattern": "page_object",
      "confidence": 0.5323870182037354
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "assertion",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    },
    {
      "input": "// Create a locator.  \nconst getStarted = page.getByRole('link', { name: 'Get started' });  \n  \n// Click it.  \nawait getStarted.click();",
      "true_pattern": "navigation",
      "predicted_pattern": "general",
      "confidence": 0.44072574377059937
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "general",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "navigation",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    },
    {
      "input": "",
      "true_pattern": "navigation",
      "predicted_pattern": "general",
      "confidence": 0.7208908796310425
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "navigation",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "wait_strategy",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    },
    {
      "input": "test(\"check homepage\", async ({ page }) => {\n  await page.goto(\"https://example.com\");\n  // Add assertions here\n});",
      "true_pattern": "assertion",
      "predicted_pattern": "page_object",
      "confidence": 0.5413938164710999
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "assertion",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "fixture",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    },
    {
      "input": "",
      "true_pattern": "wait_strategy",
      "predicted_pattern": "general",
      "confidence": 0.8089364767074585
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "assertion",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    },
    {
      "input": "",
      "true_pattern": "wait_strategy",
      "predicted_pattern": "general",
      "confidence": 0.4120015501976013
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "navigation",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "assertion",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    },
    {
      "input": "src/pages/ProductsPage.spec.tsx",
      "true_pattern": "assertion",
      "predicted_pattern": "page_object",
      "confidence": 0.5225990414619446
    },
    {
      "input": "test(\"check homepage\", async ({ page }) => {\n  await page.goto(\"https://example.com\");\n  // Add assertions here\n});",
      "true_pattern": "assertion",
      "predicted_pattern": "page_object",
      "confidence": 0.5413938164710999
    },
    {
      "input": "",
      "true_pattern": "general",
      "predicted_pattern": "general",
      "confidence": 0.8134518265724182
    },
    {
      "input": "",
      "true_pattern": "assertion",
      "predicted_pattern": "general",
      "confidence": 0.7133926749229431
    },
    {
      "input": "You can click on the image after locating it by the text alternative:",
      "true_pattern": "navigation",
      "predicted_pattern": "page_object",
      "confidence": 0.5256361365318298
    },
    {
      "input": "",
      "true_pattern": "general",
      "predicted_pattern": "general",
      "confidence": 0.7269084453582764
    },
    {
      "input": "A similar configuration in Next.js would look like this: | src/component.spec.jsx",
      "true_pattern": "assertion",
      "predicted_pattern": "general",
      "confidence": 0.515138566493988
    },
    {
      "input": "note | If both \"New email\" button and security dialog appear on screen, the \"or\" locator will match both of them, possibly throwing the \"strict mode violation\" error. In this case, you can use [locator.first()](/docs/api/class-locator#locator-first) to only match one of them.",
      "true_pattern": "assertion",
      "predicted_pattern": "general",
      "confidence": 0.6085097193717957
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "general",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    },
    {
      "input": "Creating mocks\u200b | Since the page may be calling the API very early while loading it's important to setup all the mocks before the page started loading. The easiest way to achieve that is to call [page.addInitScript()](/docs/api/class-page#page-add-init-script):",
      "true_pattern": "wait_strategy",
      "predicted_pattern": "general",
      "confidence": 0.47414615750312805
    },
    {
      "input": "import { defineConfig } from '@playwright/test';  \n  \nexport default defineConfig({  \n  timeout: 60000, // Timeout is shared between all tests.  \n  projects: [  \n    {  \n      name: 'Smoke',  \n      testMatch: /.*smoke.spec.ts/,  \n      retries: 0,  \n    },  \n    {  \n      name: 'Default',  \n      testIgnore: /.*smoke.spec.ts/,  \n      retries: 2,  \n    },  \n  ],  \n});",
      "true_pattern": "general",
      "predicted_pattern": "general",
      "confidence": 0.7660996913909912
    },
    {
      "input": "const { test, assert } = require('@playwright/test');  \nconst { PlaywrightDevPage } = require('./playwright-dev-page');  \n  \ntest('getting started should contain table of contents', async ({ page }) => {  \n  const playwrightDev = new PlaywrightDevPage(page);  \n  await playwrightDev.goto();  \n  await playwrightDev.getStarted();  \n  await assert(playwrightDev.tocList).toHaveText([  \n    `How to install Playwright`,  \n    `What's Installed`,  \n    `How to run the example test`,  \n    `How to open the HTML test report`,  \n    `Write tests using web first assertions, page fixtures and locators`,  \n    `Run single test, multiple tests, headed mode`,  \n    `Generate tests with Codegen`,  \n    `See a trace of your tests`  \n  ]);  \n});  \n  \ntest('should show Page Object Model article', async ({ page }) => {  \n  const playwrightDev = new PlaywrightDevPage(page);  \n  await playwrightDev.goto();  \n  await playwrightDev.pageObjectModel();  \n  await assert(page.locator('article')).toContainText('Page Object Model is a common pattern');  \n});",
      "true_pattern": "fixture",
      "predicted_pattern": "page_object",
      "confidence": 0.46563446521759033
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "navigation",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    },
    {
      "input": "Create `playwright/fixtures.ts` file that will [override `storageState` fixture](/docs/test-fixtures#overriding-fixtures) to authenticate once per worker. Use [testInfo.parallelIndex](/docs/api/class-testinfo#test-info-parallel-index) to differentiate between workers. | playwright/fixtures.ts",
      "true_pattern": "fixture",
      "predicted_pattern": "general",
      "confidence": 0.29660356044769287
    },
    {
      "input": "import { test, assert } from '@playwright/test';  \n  \ntest.use({  \n  viewport: { width: 1600, height: 1200 },  \n});  \n  \ntest('my test', async ({ page }) => {  \n  // ...  \n});  \n\n\n\n// Create context with given viewport  \nconst context = await browser.newContext({  \n  viewport: { width: 1280, height: 1024 }  \n});  \n  \n// Resize viewport for individual page  \nawait page.setViewportSize({ width: 1600, height: 1200 });  \n  \n// Emulate high-DPI  \nconst context = await browser.newContext({  \n  viewport: { width: 2560, height: 1440 },  \n  deviceScaleFactor: 2,  \n});",
      "true_pattern": "assertion",
      "predicted_pattern": "page_object",
      "confidence": 0.5537835359573364
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "assertion",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    },
    {
      "input": "import { test, assert } from '@playwright/test';  \nimport path from 'path';  \n  \ntest.beforeEach(async ({ page }) => {  \n  // Add script for every test in the beforeEach hook.  \n  // Make sure to correctly resolve the script path.  \n  await page.addInitScript({ path: path.resolve(__dirname, '../mocks/preload.js') });  \n});",
      "true_pattern": "assertion",
      "predicted_pattern": "page_object",
      "confidence": 0.6098564267158508
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "assertion",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    },
    {
      "input": "",
      "true_pattern": "general",
      "predicted_pattern": "general",
      "confidence": 0.8385759592056274
    },
    {
      "input": "Use a regular expression:",
      "true_pattern": "navigation",
      "predicted_pattern": "page_object",
      "confidence": 0.46109119057655334
    },
    {
      "input": "The following snippet is **CORRECT** because it passes the value explicitly as an argument:",
      "true_pattern": "wait_strategy",
      "predicted_pattern": "wait_strategy",
      "confidence": 0.4382973611354828
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "wait_strategy",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "assertion",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    },
    {
      "input": "import { test as base } from '@playwright/test';  \n  \nexport const test = base.extend({  \n  helperFixture: [async ({}, use, testInfo) => {  \n    // ...  \n  }, { box: true }],  \n});",
      "true_pattern": "fixture",
      "predicted_pattern": "general",
      "confidence": 0.6296997666358948
    },
    {
      "input": "Locators are strict. This means that all operations on locators that imply some target DOM element will throw an exception if more than one element matches. For example, the following call throws if there are several buttons in the DOM: | Throws an error if more than one\u200b",
      "true_pattern": "navigation",
      "predicted_pattern": "general",
      "confidence": 0.46826621890068054
    },
    {
      "input": "// Subscribe to 'request' and 'response' events.  \npage.on('request', request => console.log('>>', request.method(), request.url()));  \npage.on('response', response => console.log('<<', response.status(), response.url()));  \n  \nawait page.navigate('https://example.com');",
      "true_pattern": "navigation",
      "predicted_pattern": "page_object",
      "confidence": 0.49477019906044006
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "navigation",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    },
    {
      "input": "",
      "true_pattern": "assertion",
      "predicted_pattern": "general",
      "confidence": 0.6761372685432434
    },
    {
      "input": "",
      "true_pattern": "navigation",
      "predicted_pattern": "general",
      "confidence": 0.7106636166572571
    },
    {
      "input": "alert(), confirm(), prompt() dialogs\u200b | By default, dialogs are auto-dismissed by Playwright, so you don't have to handle them. However, you can register a dialog handler before the action that triggers the dialog to either [dialog.accept()](/docs/api/class-dialog#dialog-accept) or [dialog.dismiss()](/docs/api/class-dialog#dialog-dismiss) it.",
      "true_pattern": "navigation",
      "predicted_pattern": "general",
      "confidence": 0.5651659369468689
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "wait_strategy",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    },
    {
      "input": "",
      "true_pattern": "assertion",
      "predicted_pattern": "general",
      "confidence": 0.8083838224411011
    },
    {
      "input": "",
      "true_pattern": "navigation",
      "predicted_pattern": "general",
      "confidence": 0.6986921429634094
    },
    {
      "input": "component.spec.ts",
      "true_pattern": "wait_strategy",
      "predicted_pattern": "wait_strategy",
      "confidence": 0.551239013671875
    },
    {
      "input": "You can create a test list file that will control the order of tests - first run `feature-b` tests, then `feature-a` tests. Note how each test file is wrapped in a `test.describe()` block that calls the function where tests are defined. This way `test.use()` calls only affect tests from a single file. | test.list.ts",
      "true_pattern": "general",
      "predicted_pattern": "general",
      "confidence": 0.7666231393814087
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "assertion",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    },
    {
      "input": "In configuration file, pass options directly: | playwright.config.ts",
      "true_pattern": "general",
      "predicted_pattern": "general",
      "confidence": 0.7052852511405945
    },
    {
      "input": "",
      "true_pattern": "assertion",
      "predicted_pattern": "general",
      "confidence": 0.8660311698913574
    },
    {
      "input": "",
      "true_pattern": "assertion",
      "predicted_pattern": "general",
      "confidence": 0.5471300482749939
    },
    {
      "input": "test(\"check homepage\", async ({ page }) => {\n  await page.goto(\"https://example.com\");\n  // Add assertions here\n});",
      "true_pattern": "assertion",
      "predicted_pattern": "page_object",
      "confidence": 0.5413938164710999
    },
    {
      "input": "await page.locator('button:visible').click();",
      "true_pattern": "navigation",
      "predicted_pattern": "page_object",
      "confidence": 0.5713797211647034
    },
    {
      "input": "",
      "true_pattern": "navigation",
      "predicted_pattern": "general",
      "confidence": 0.7825522422790527
    },
    {
      "input": "",
      "true_pattern": "wait_strategy",
      "predicted_pattern": "general",
      "confidence": 0.7623507976531982
    },
    {
      "input": "React locator allows finding elements by their component name and property values. The syntax is very similar to [CSS attribute selectors](https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors) and supports all CSS attribute selector operators. | In React locator, component names are transcribed with **CamelCase**.",
      "true_pattern": "navigation",
      "predicted_pattern": "page_object",
      "confidence": 0.4984646141529083
    },
    {
      "input": "import { defineConfig } from '@playwright/test';  \n  \nexport default defineConfig({  \n  use: {  \n    // Whether to automatically download all the attachments.  \n    acceptDownloads: false,  \n  \n    // An object containing additional HTTP headers to be sent with every request.  \n    extraHTTPHeaders: {  \n      'X-My-Header': 'value',  \n    },  \n  \n    // Credentials for HTTP authentication.  \n    httpCredentials: {  \n      username: 'user',  \n      password: 'pass',  \n    },  \n  \n    // Whether to ignore HTTPS errors during navigation.  \n    ignoreHTTPSErrors: true,  \n  \n    // Whether to emulate network being offline.  \n    offline: true,  \n  \n    // Proxy settings used for all pages in the test.  \n    proxy: {  \n      server: 'http://myproxy.com:3128',  \n      bypass: 'localhost',  \n    },  \n  },  \n});",
      "true_pattern": "general",
      "predicted_pattern": "general",
      "confidence": 0.7355788946151733
    },
    {
      "input": "playwright.config.ts",
      "true_pattern": "wait_strategy",
      "predicted_pattern": "wait_strategy",
      "confidence": 0.4132634699344635
    },
    {
      "input": "Test with predefined time\u200b | Often you only need to fake `Date.now` while keeping the timers going. That way the time flows naturally, but `Date.now` always returns a fixed value.",
      "true_pattern": "assertion",
      "predicted_pattern": "general",
      "confidence": 0.5927047729492188
    },
    {
      "input": "",
      "true_pattern": "navigation",
      "predicted_pattern": "general",
      "confidence": 0.6564153432846069
    },
    {
      "input": "",
      "true_pattern": "form_interaction",
      "predicted_pattern": "general",
      "confidence": 0.7366498708724976
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "wait_strategy",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "assertion",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    },
    {
      "input": "",
      "true_pattern": "general",
      "predicted_pattern": "general",
      "confidence": 0.7951769828796387
    },
    {
      "input": "",
      "true_pattern": "navigation",
      "predicted_pattern": "general",
      "confidence": 0.6154133081436157
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "wait_strategy",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "navigation",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    },
    {
      "input": "By default, [fixture](/docs/test-fixtures) shares timeout with the test. However, for slow fixtures, especially [worker-scoped](/docs/test-fixtures#worker-scoped-fixtures) ones, it is convenient to have a separate timeout. This way you can keep the overall test timeout small, and give the slow fixture more time. | example.spec.ts",
      "true_pattern": "fixture",
      "predicted_pattern": "general",
      "confidence": 0.6593409776687622
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "wait_strategy",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    },
    {
      "input": "assert(await page.screenshot()).toMatchSnapshot({  \n  maxDiffPixels: 27, // allow no more than 27 different pixels.  \n});",
      "true_pattern": "assertion",
      "predicted_pattern": "assertion",
      "confidence": 0.41984036564826965
    },
    {
      "input": "test(\"check homepage\", async ({ page }) => {\n  await page.goto(\"https://example.com\");\n  // Add assertions here\n});",
      "true_pattern": "assertion",
      "predicted_pattern": "page_object",
      "confidence": 0.5413938164710999
    },
    {
      "input": "",
      "true_pattern": "assertion",
      "predicted_pattern": "general",
      "confidence": 0.5670920014381409
    },
    {
      "input": "To ensure that `<x-details>` contains the text \"Details\":",
      "true_pattern": "assertion",
      "predicted_pattern": "general",
      "confidence": 0.4632655084133148
    },
    {
      "input": "",
      "true_pattern": "form_interaction",
      "predicted_pattern": "general",
      "confidence": 0.844989001750946
    },
    {
      "input": "",
      "true_pattern": "assertion",
      "predicted_pattern": "general",
      "confidence": 0.5908513069152832
    },
    {
      "input": "const rowLocator = page.getByRole('listitem');  \n  \nawait rowLocator  \n    .filter({ hasText: 'Mary' })  \n    .filter({ has: page.getByRole('button', { name: 'Say goodbye' }) })  \n    .screenshot({ path: 'screenshot.png' });",
      "true_pattern": "wait_strategy",
      "predicted_pattern": "page_object",
      "confidence": 0.608917772769928
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "fixture",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    },
    {
      "input": "",
      "true_pattern": "page_object",
      "predicted_pattern": "general",
      "confidence": 0.538712203502655
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "general",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    },
    {
      "input": "test('example with attachment', async ({ page }, testInfo) => {  \n  await page.navigate('https://your-site.com/');  \n  \n  const accessibilityScanResults = await new AxeBuilder({ page }).analyze();  \n  \n  await testInfo.attach('accessibility-scan-results', {  \n    body: JSON.stringify(accessibilityScanResults, null, 2),  \n    contentType: 'application/json'  \n  });  \n  \n  assert(accessibilityScanResults.violations).toEqual([]);  \n});",
      "true_pattern": "assertion",
      "predicted_pattern": "page_object",
      "confidence": 0.4956485629081726
    },
    {
      "input": "You can also specify custom polling intervals:",
      "true_pattern": "assertion",
      "predicted_pattern": "general",
      "confidence": 0.5531740784645081
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "navigation",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    },
    {
      "input": "Locate an item by its test id of \"orange\" and then click it.",
      "true_pattern": "navigation",
      "predicted_pattern": "page_object",
      "confidence": 0.5879876613616943
    },
    {
      "input": "",
      "true_pattern": "assertion",
      "predicted_pattern": "general",
      "confidence": 0.7133926749229431
    },
    {
      "input": "test('query params', async ({ request }) => {  \n  const searchParams = new URLSearchParams();  \n  searchParams.set('userId', 1);  \n  const response = await request.get(  \n      'https://jsonplaceholder.typicode.com/posts',  \n      {  \n        params: searchParams // or as a string: 'userId=1'  \n      }  \n  );  \n  // ...  \n});",
      "true_pattern": "wait_strategy",
      "predicted_pattern": "page_object",
      "confidence": 0.5903209447860718
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "navigation",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    },
    {
      "input": "",
      "true_pattern": "navigation",
      "predicted_pattern": "general",
      "confidence": 0.769122302532196
    },
    {
      "input": "",
      "true_pattern": "navigation",
      "predicted_pattern": "general",
      "confidence": 0.7973357439041138
    },
    {
      "input": "await page.locator('article', {  \n  has: page.locator('.highlight'),  \n}).click();",
      "true_pattern": "navigation",
      "predicted_pattern": "page_object",
      "confidence": 0.5516950488090515
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "page_object",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    },
    {
      "input": "alert(), confirm(), prompt() dialogs\u200b | By default, dialogs are auto-dismissed by Playwright, so you don't have to handle them. However, you can register a dialog handler before the action that triggers the dialog to either [dialog.accept()](/docs/api/class-dialog#dialog-accept) or [dialog.dismiss()](/docs/api/class-dialog#dialog-dismiss) it.",
      "true_pattern": "navigation",
      "predicted_pattern": "page_object",
      "confidence": 0.3885473310947418
    },
    {
      "input": "",
      "true_pattern": "general",
      "predicted_pattern": "general",
      "confidence": 0.7671991586685181
    },
    {
      "input": "import { test } from '@playwright/test';  \n  \ntest.beforeEach(async ({ page }) => {  \n  // Runs before each test and signs in each page.  \n  await page.navigate('https://github.com/login');  \n  await page.getByLabel('Username or email address').fill('username');  \n  await page.getByLabel('Password').fill('password');  \n  await page.getByRole('button', { name: 'Sign in' }).click();  \n});  \n  \ntest('first', async ({ page }) => {  \n  // page is signed in.  \n});  \n  \ntest('second', async ({ page }) => {  \n  // page is signed in.  \n});",
      "true_pattern": "navigation",
      "predicted_pattern": "page_object",
      "confidence": 0.49318933486938477
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "general",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "wait_strategy",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    },
    {
      "input": "playwright-dev-page.js",
      "true_pattern": "page_object",
      "predicted_pattern": "page_object",
      "confidence": 0.7789599299430847
    },
    {
      "input": "Do something with each element in the list\u200b | Iterate elements:",
      "true_pattern": "wait_strategy",
      "predicted_pattern": "page_object",
      "confidence": 0.3421676456928253
    },
    {
      "input": "",
      "true_pattern": "assertion",
      "predicted_pattern": "general",
      "confidence": 0.7133926749229431
    },
    {
      "input": "Or wait for a network response after the button click with [page.waitForResponse()](/docs/api/class-page#page-wait-for-response):",
      "true_pattern": "navigation",
      "predicted_pattern": "page_object",
      "confidence": 0.63080894947052
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "page_object",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    },
    {
      "input": "",
      "true_pattern": "navigation",
      "predicted_pattern": "general",
      "confidence": 0.5205826163291931
    },
    {
      "input": "import type { FullConfig } from '@playwright/test';  \n  \nasync function globalSetup(config: FullConfig) {  \n  process.env.FOO = 'some data';  \n  // Or a more complicated data structure as JSON:  \n  process.env.BAR = JSON.stringify({ some: 'data' });  \n}  \n  \nexport default globalSetup;",
      "true_pattern": "form_interaction",
      "predicted_pattern": "general",
      "confidence": 0.5558230876922607
    },
    {
      "input": "Handle requests\u200b",
      "true_pattern": "navigation",
      "predicted_pattern": "page_object",
      "confidence": 0.44312790036201477
    },
    {
      "input": "",
      "true_pattern": "wait_strategy",
      "predicted_pattern": "general",
      "confidence": 0.686292290687561
    },
    {
      "input": "",
      "true_pattern": "navigation",
      "predicted_pattern": "general",
      "confidence": 0.8359550833702087
    },
    {
      "input": "await page.routeWebSocket('/ws', ws => {  \n  ws.onMessage(message => {  \n    if (message === 'request')  \n      ws.send('response');  \n  });  \n});",
      "true_pattern": "wait_strategy",
      "predicted_pattern": "page_object",
      "confidence": 0.6230422258377075
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "assertion",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    },
    {
      "input": "import type { Page, Locator } from '@playwright/test';  \n  \nexport class TodoPage {  \n  private readonly inputBox: Locator;  \n  private readonly todoItems: Locator;  \n  \n  constructor(public readonly page: Page) {  \n    this.inputBox = this.page.locator('input.new-todo');  \n    this.todoItems = this.page.getByTestId('todo-item');  \n  }  \n  \n  async goto() {  \n    await this.page.navigate('https://demo.playwright.dev/todomvc/');  \n  }  \n  \n  async addToDo(text: string) {  \n    await this.inputBox.fill(text);  \n    await this.inputBox.press('Enter');  \n  }  \n  \n  async remove(text: string) {  \n    const todo = this.todoItems.filter({ hasText: text });  \n    await todo.hover();  \n    await todo.getByLabel('Delete').click();  \n  }  \n  \n  async removeAll() {  \n    while ((await this.todoItems.count()) > 0) {  \n      await this.todoItems.first().hover();  \n      await this.todoItems.getByLabel('Delete').first().click();  \n    }  \n  }  \n}",
      "true_pattern": "page_object",
      "predicted_pattern": "page_object",
      "confidence": 0.6228334307670593
    },
    {
      "input": "",
      "true_pattern": "fixture",
      "predicted_pattern": "general",
      "confidence": 0.7845286130905151
    },
    {
      "input": "// A primitive value.  \nawait page.evaluate(num => num, 42);  \n  \n// An array.  \nawait page.evaluate(array => array.length, [1, 2, 3]);  \n  \n// An object.  \nawait page.evaluate(object => object.foo, { foo: 'bar' });  \n  \n// A single handle.  \nconst button = await page.evaluateHandle('window.button');  \nawait page.evaluate(button => button.textContent, button);  \n  \n// Alternative notation using JSHandle.evaluate.  \nawait button.evaluate((button, from) => button.textContent.substring(from), 5);  \n  \n// Object with multiple handles.  \nconst button1 = await page.evaluateHandle('window.button1');  \nconst button2 = await page.evaluateHandle('window.button2');  \nawait page.evaluate(  \n    o => o.button1.textContent + o.button2.textContent,  \n    { button1, button2 });  \n  \n// Object destructuring works. Note that property names must match  \n// between the destructured object and the argument.  \n// Also note the required parenthesis.  \nawait page.evaluate(  \n    ({ button1, button2 }) => button1.textContent + button2.textContent,  \n    { button1, button2 });  \n  \n// Array works as well. Arbitrary names can be used for destructuring.  \n// Note the required parenthesis.  \nawait page.evaluate(  \n    ([b1, b2]) => b1.textContent + b2.textContent,  \n    [button1, button2]);  \n  \n// Any mix of serializables and handles works.  \nawait page.evaluate(  \n    x => x.button1.textContent + x.list[0].textContent + String(x.foo),  \n    { button1, list: [button2], foo: null });",
      "true_pattern": "wait_strategy",
      "predicted_pattern": "page_object",
      "confidence": 0.5698498487472534
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "wait_strategy",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "navigation",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    },
    {
      "input": "",
      "true_pattern": "navigation",
      "predicted_pattern": "general",
      "confidence": 0.5816138386726379
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "assertion",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    },
    {
      "input": "Using `.zip` path for `recordHar` context option automatically zips the resulting HAR:",
      "true_pattern": "wait_strategy",
      "predicted_pattern": "wait_strategy",
      "confidence": 0.5460556149482727
    },
    {
      "input": "const button = page.getByRole('button').and(page.getByTitle('Subscribe'));",
      "true_pattern": "general",
      "predicted_pattern": "page_object",
      "confidence": 0.5963094234466553
    },
    {
      "input": "",
      "true_pattern": "general",
      "predicted_pattern": "general",
      "confidence": 0.8229821920394897
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "wait_strategy",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    },
    {
      "input": "test(\"check homepage\", async ({ page }) => {\n  await page.goto(\"https://example.com\");\n  // Add assertions here\n});",
      "true_pattern": "assertion",
      "predicted_pattern": "page_object",
      "confidence": 0.5413938164710999
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "general",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    },
    {
      "input": "",
      "true_pattern": "general",
      "predicted_pattern": "general",
      "confidence": 0.8431201577186584
    },
    {
      "input": "",
      "true_pattern": "navigation",
      "predicted_pattern": "general",
      "confidence": 0.7557291984558105
    },
    {
      "input": "",
      "true_pattern": "assertion",
      "predicted_pattern": "general",
      "confidence": 0.8406538963317871
    },
    {
      "input": "Verifying API calls\u200b | Sometimes it is useful to check if the page made all expected APIs calls. You can record all API method invocations and then compare them with golden result. [page.exposeFunction()](/docs/api/class-page#page-expose-function) may come in handy for passing message from the page back to the test code:",
      "true_pattern": "assertion",
      "predicted_pattern": "general",
      "confidence": 0.6647040247917175
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "general",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    },
    {
      "input": "Waiting for navigation\u200b | Clicking an element could trigger multiple navigations. In these cases, it is recommended to explicitly [page.waitForURL()](/docs/api/class-page#page-wait-for-url) to a specific url.",
      "true_pattern": "navigation",
      "predicted_pattern": "page_object",
      "confidence": 0.4861942529678345
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "general",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    },
    {
      "input": "component.spec.ts",
      "true_pattern": "wait_strategy",
      "predicted_pattern": "wait_strategy",
      "confidence": 0.551239013671875
    },
    {
      "input": "1. Navigate to the homepage\n2. Verify key elements are present\n3. Test main user interactions\n4. Handle any errors or loading states\n5. Follow Playwright best practices",
      "true_pattern": "assertion",
      "predicted_pattern": "general",
      "confidence": 0.6456393003463745
    }
  ]
}