url,original_tag,normalized_tag,semantic_role,element_type,is_interactive,is_visible,has_text,inner_text,selector,attributes
https://docs.python.org/3/tutorial/index.html,nav,nav,navigation,navigation,False,False,True,dev (3.14)3.13.13.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6,html > body > div > nav,"{'class': 'nav-content', 'role': 'navigation'}"
https://docs.python.org/3/tutorial/index.html,nav,nav,navigation,navigation,False,False,True,"EnglishSpanishFrenchItalianJapaneseKoreanPolishBrazilian PortugueseTurkishSimplified ChineseTraditional Chinese
            

    Theme
    
        Auto
        Light
        Dark
    

  
    Previous topic
    Changelog
  
  
    Next topic
    1. Whetting Your Appetite
  
  
    This Page
    
      Report a Bug
      
        Show Source",html > body > div > div > nav,"{'class': 'menu', 'role': 'navigation', 'aria-label': 'main navigation', 'tabindex': '-1'}"
https://docs.python.org/3/tutorial/index.html,nav,nav,navigation,navigation,False,False,True,dev (3.14)3.13.13.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6,html > body > div > nav,"{'class': 'nav-content', 'role': 'navigation'}"
https://docs.python.org/3/tutorial/index.html,nav,nav,navigation,navigation,False,False,True,"EnglishSpanishFrenchItalianJapaneseKoreanPolishBrazilian PortugueseTurkishSimplified ChineseTraditional Chinese
            

    Theme
    
        Auto
        Light
        Dark
    

  
    Previous topic
    Changelog
  
  
    Next topic
    1. Whetting Your Appetite
  
  
    This Page
    
      Report a Bug
      
        Show Source",html > body > div > div > nav,"{'class': 'menu', 'role': 'navigation', 'aria-label': 'main navigation', 'tabindex': '-1'}"
https://docs.python.org/3/tutorial/index.html,div,div,navigation,navigation,False,True,True,"index
modules |
next |
previous |
 Python » 
English
Spanish
French
Italian
Japanese
Korean
Polish
Brazilian Portuguese
Turkish
Simplified Chinese
Traditional Chinese
dev (3.14)
3.13.1
3.12
3.11
3.10
3.9
3.8
3.7
3.6
3.5
3.4
3.3
3.2
3.1
3.0
2.7
2.6
 3.13.1 Documentation » The Python Tutorial
  |
Theme 
Auto
Light
Dark
 |",html > body > div:nth-of-type(2),"{'class': 'related', 'role': 'navigation', 'aria-label': 'Related'}"
https://docs.python.org/3/tutorial/index.html,div,div,navigation,navigation,False,True,True,"Previous topic

Changelog

Next topic

1. Whetting Your Appetite

This Page
Report a Bug
Show Source
«",html > body > div:nth-of-type(3) > div:nth-of-type(2),"{'class': 'sphinxsidebar', 'role': 'navigation', 'aria-label': 'Main'}"
https://docs.python.org/3/tutorial/index.html,div,div,navigation,navigation,False,True,True,"index
modules |
next |
previous |
 Python » 
English
Spanish
French
Italian
Japanese
Korean
Polish
Brazilian Portuguese
Turkish
Simplified Chinese
Traditional Chinese
dev (3.14)
3.13.1
3.12
3.11
3.10
3.9
3.8
3.7
3.6
3.5
3.4
3.3
3.2
3.1
3.0
2.7
2.6
 3.13.1 Documentation » The Python Tutorial
  |
Theme 
Auto
Light
Dark
 |",html > body > div:nth-of-type(4),"{'class': 'related', 'role': 'navigation', 'aria-label': 'Related'}"
https://docs.python.org/3/tutorial/index.html,div,div,content,content,False,True,True,"The Python Tutorial

Python is an easy to learn, powerful programming language. It has efficient high-level data structures and a simple but effective approach to object-oriented programming. Python’s elegant syntax and dynamic typing, together with its interpreted nature, make it an ideal language for scripting and rapid application development in many areas on most platforms.

The Python interpreter and the extensive standard library are freely available in source or binary form for all major platforms from the Python web site, https://www.python.org/, and may be freely distributed. The same site also contains distributions of and pointers to many free third party Python modules, programs and tools, and additional documentation.

The Python interpreter is easily extended with new functions and data types implemented in C or C++ (or other languages callable from C). Python is also suitable as an extension language for customizable applications.

This tutorial introduces the reader informally to the basic concepts and features of the Python language and system. It helps to have a Python interpreter handy for hands-on experience, but all examples are self-contained, so the tutorial can be read off-line as well.

For a description of standard objects and modules, see The Python Standard Library. The Python Language Reference gives a more formal definition of the language. To write extensions in C or C++, read Extending and Embedding the Python Interpreter and Python/C API Reference Manual. There are also several books covering Python in depth.

This tutorial does not attempt to be comprehensive and cover every single feature, or even every commonly used feature. Instead, it introduces many of Python’s most noteworthy features, and will give you a good idea of the language’s flavor and style. After reading it, you will be able to read and write Python modules and programs, and you will be ready to learn more about the various Python library modules described in The Python Standard Library.

The Glossary is also worth going through.

1. Whetting Your Appetite
2. Using the Python Interpreter
2.1. Invoking the Interpreter
2.1.1. Argument Passing
2.1.2. Interactive Mode
2.2. The Interpreter and Its Environment
2.2.1. Source Code Encoding
3. An Informal Introduction to Python
3.1. Using Python as a Calculator
3.1.1. Numbers
3.1.2. Text
3.1.3. Lists
3.2. First Steps Towards Programming
4. More Control Flow Tools
4.1. if Statements
4.2. for Statements
4.3. The range() Function
4.4. break and continue Statements
4.5. else Clauses on Loops
4.6. pass Statements
4.7. match Statements
4.8. Defining Functions
4.9. More on Defining Functions
4.9.1. Default Argument Values
4.9.2. Keyword Arguments
4.9.3. Special parameters
4.9.3.1. Positional-or-Keyword Arguments
4.9.3.2. Positional-Only Parameters
4.9.3.3. Keyword-Only Arguments
4.9.3.4. Function Examples
4.9.3.5. Recap
4.9.4. Arbitrary Argument Lists
4.9.5. Unpacking Argument Lists
4.9.6. Lambda Expressions
4.9.7. Documentation Strings
4.9.8. Function Annotations
4.10. Intermezzo: Coding Style
5. Data Structures
5.1. More on Lists
5.1.1. Using Lists as Stacks
5.1.2. Using Lists as Queues
5.1.3. List Comprehensions
5.1.4. Nested List Comprehensions
5.2. The del statement
5.3. Tuples and Sequences
5.4. Sets
5.5. Dictionaries
5.6. Looping Techniques
5.7. More on Conditions
5.8. Comparing Sequences and Other Types
6. Modules
6.1. More on Modules
6.1.1. Executing modules as scripts
6.1.2. The Module Search Path
6.1.3. “Compiled” Python files
6.2. Standard Modules
6.3. The dir() Function
6.4. Packages
6.4.1. Importing * From a Package
6.4.2. Intra-package References
6.4.3. Packages in Multiple Directories
7. Input and Output
7.1. Fancier Output Formatting
7.1.1. Formatted String Literals
7.1.2. The String format() Method
7.1.3. Manual String Formatting
7.1.4. Old string formatting
7.2. Reading and Writing Files
7.2.1. Methods of File Objects
7.2.2. Saving structured data with json
8. Errors and Exceptions
8.1. Syntax Errors
8.2. Exceptions
8.3. Handling Exceptions
8.4. Raising Exceptions
8.5. Exception Chaining
8.6. User-defined Exceptions
8.7. Defining Clean-up Actions
8.8. Predefined Clean-up Actions
8.9. Raising and Handling Multiple Unrelated Exceptions
8.10. Enriching Exceptions with Notes
9. Classes
9.1. A Word About Names and Objects
9.2. Python Scopes and Namespaces
9.2.1. Scopes and Namespaces Example
9.3. A First Look at Classes
9.3.1. Class Definition Syntax
9.3.2. Class Objects
9.3.3. Instance Objects
9.3.4. Method Objects
9.3.5. Class and Instance Variables
9.4. Random Remarks
9.5. Inheritance
9.5.1. Multiple Inheritance
9.6. Private Variables
9.7. Odds and Ends
9.8. Iterators
9.9. Generators
9.10. Generator Expressions
10. Brief Tour of the Standard Library
10.1. Operating System Interface
10.2. File Wildcards
10.3. Command Line Arguments
10.4. Error Output Redirection and Program Termination
10.5. String Pattern Matching
10.6. Mathematics
10.7. Internet Access
10.8. Dates and Times
10.9. Data Compression
10.10. Performance Measurement
10.11. Quality Control
10.12. Batteries Included
11. Brief Tour of the Standard Library — Part II
11.1. Output Formatting
11.2. Templating
11.3. Working with Binary Data Record Layouts
11.4. Multi-threading
11.5. Logging
11.6. Weak References
11.7. Tools for Working with Lists
11.8. Decimal Floating-Point Arithmetic
12. Virtual Environments and Packages
12.1. Introduction
12.2. Creating Virtual Environments
12.3. Managing Packages with pip
13. What Now?
14. Interactive Input Editing and History Substitution
14.1. Tab Completion and History Editing
14.2. Alternatives to the Interactive Interpreter
15. Floating-Point Arithmetic: Issues and Limitations
15.1. Representation Error
16. Appendix
16.1. Interactive Mode
16.1.1. Error Handling
16.1.2. Executable Python Scripts
16.1.3. The Interactive Startup File
16.1.4. The Customization Modules",html > body > div:nth-of-type(3) > div > div > div,"{'class': 'body', 'role': 'main'}"
https://docs.python.org/3/tutorial/index.html,input,input,interactive,interactive,True,False,False,,input#menuToggler,"{'type': 'checkbox', 'id': 'menuToggler', 'class': 'toggler__input', 'aria-controls': 'navigation', 'aria-pressed': 'false', 'aria-expanded': 'false', 'role': 'button', 'aria-label': 'Menu'}"
https://docs.python.org/3/tutorial/index.html,nav,nav,navigation,navigation,False,False,True,dev (3.14)3.13.13.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6,html > body > div > nav,"{'class': 'nav-content', 'role': 'navigation'}"
https://docs.python.org/3/tutorial/index.html,div,div,container,container,False,False,True,"EnglishSpanishFrenchItalianJapaneseKoreanPolishBrazilian PortugueseTurkishSimplified ChineseTraditional Chinese
            

    Theme
    
        Auto
        Light
        Dark
    

  
    Previous topic
    Changelog
  
  
    Next topic
    1. Whetting Your Appetite
  
  
    This Page
    
      Report a Bug
      
        Show Source",html > body > div > div,{'class': 'menu-wrapper'}
https://docs.python.org/3/tutorial/index.html,nav,nav,navigation,navigation,False,False,True,"EnglishSpanishFrenchItalianJapaneseKoreanPolishBrazilian PortugueseTurkishSimplified ChineseTraditional Chinese
            

    Theme
    
        Auto
        Light
        Dark
    

  
    Previous topic
    Changelog
  
  
    Next topic
    1. Whetting Your Appetite
  
  
    This Page
    
      Report a Bug
      
        Show Source",html > body > div > div > nav,"{'class': 'menu', 'role': 'navigation', 'aria-label': 'main navigation', 'tabindex': '-1'}"
https://docs.python.org/3/tutorial/index.html,select,select,interactive,interactive,True,False,True,EnglishSpanishFrenchItalianJapaneseKoreanPolishBrazilian PortugueseTurkishSimplified ChineseTraditional Chinese,html > body > div > div > nav > div > select,{'class': 'language-select'}
https://docs.python.org/3/tutorial/index.html,h4,h4,content,content,False,False,True,Previous topic,html > body > div > div > nav > div:nth-of-type(2) > h4,{}
https://docs.python.org/3/tutorial/index.html,p,p,content,content,False,False,True,Changelog,html > body > div > div > nav > div:nth-of-type(2) > p,{'class': 'topless'}
https://docs.python.org/3/tutorial/index.html,h4,h4,content,content,False,False,True,Next topic,html > body > div > div > nav > div:nth-of-type(3) > h4,{}
https://docs.python.org/3/tutorial/index.html,p,p,content,content,False,False,True,1. Whetting Your Appetite,html > body > div > div > nav > div:nth-of-type(3) > p,{'class': 'topless'}
https://docs.python.org/3/tutorial/index.html,h3,h3,content,content,False,False,True,This Page,html > body > div > div > nav > div:nth-of-type(4) > h3,{}
https://docs.python.org/3/tutorial/index.html,ul,ul,unknown,container,False,False,True,"Report a Bug
      
        Show Source",html > body > div > div > nav > div:nth-of-type(4) > ul,{'class': 'this-page-menu'}
https://docs.python.org/3/tutorial/index.html,h3,h3,content,content,False,False,True,Navigation,html > body > div:nth-of-type(2) > h3,{}
https://docs.python.org/3/tutorial/index.html,ul,ul,unknown,container,False,True,True,"index
modules |
next |
previous |
 Python » 
English
Spanish
French
Italian
Japanese
Korean
Polish
Brazilian Portuguese
Turkish
Simplified Chinese
Traditional Chinese
dev (3.14)
3.13.1
3.12
3.11
3.10
3.9
3.8
3.7
3.6
3.5
3.4
3.3
3.2
3.1
3.0
2.7
2.6
 3.13.1 Documentation » The Python Tutorial
  |
Theme 
Auto
Light
Dark
 |",html > body > div:nth-of-type(2) > ul,{}
https://docs.python.org/3/tutorial/index.html,select,select,interactive,interactive,True,True,True,"English
Spanish
French
Italian
Japanese
Korean
Polish
Brazilian Portuguese
Turkish
Simplified Chinese
Traditional Chinese",html > body > div:nth-of-type(2) > ul > li:nth-of-type(7) > div > select,{'class': 'language-select'}
https://docs.python.org/3/tutorial/index.html,select,select,interactive,interactive,True,True,True,"dev (3.14)
3.13.1
3.12
3.11
3.10
3.9
3.8
3.7
3.6
3.5
3.4
3.3
3.2
3.1
3.0
2.7
2.6",html > body > div:nth-of-type(2) > ul > li:nth-of-type(7) > div:nth-of-type(2) > select,{'class': 'version-select'}
https://docs.python.org/3/tutorial/index.html,form,form,interactive,container,False,True,False,,html > body > div:nth-of-type(2) > ul > li:nth-of-type(11) > div > form,"{'class': 'inline-search', 'action': '../search.html', 'method': 'get'}"
https://docs.python.org/3/tutorial/index.html,div,div,container,container,False,True,True,"The Python Tutorial

Python is an easy to learn, powerful programming language. It has efficient high-level data structures and a simple but effective approach to object-oriented programming. Python’s elegant syntax and dynamic typing, together with its interpreted nature, make it an ideal language for scripting and rapid application development in many areas on most platforms.

The Python interpreter and the extensive standard library are freely available in source or binary form for all major platforms from the Python web site, https://www.python.org/, and may be freely distributed. The same site also contains distributions of and pointers to many free third party Python modules, programs and tools, and additional documentation.

The Python interpreter is easily extended with new functions and data types implemented in C or C++ (or other languages callable from C). Python is also suitable as an extension language for customizable applications.

This tutorial introduces the reader informally to the basic concepts and features of the Python language and system. It helps to have a Python interpreter handy for hands-on experience, but all examples are self-contained, so the tutorial can be read off-line as well.

For a description of standard objects and modules, see The Python Standard Library. The Python Language Reference gives a more formal definition of the language. To write extensions in C or C++, read Extending and Embedding the Python Interpreter and Python/C API Reference Manual. There are also several books covering Python in depth.

This tutorial does not attempt to be comprehensive and cover every single feature, or even every commonly used feature. Instead, it introduces many of Python’s most noteworthy features, and will give you a good idea of the language’s flavor and style. After reading it, you will be able to read and write Python modules and programs, and you will be ready to learn more about the various Python library modules described in The Python Standard Library.

The Glossary is also worth going through.

1. Whetting Your Appetite
2. Using the Python Interpreter
2.1. Invoking the Interpreter
2.1.1. Argument Passing
2.1.2. Interactive Mode
2.2. The Interpreter and Its Environment
2.2.1. Source Code Encoding
3. An Informal Introduction to Python
3.1. Using Python as a Calculator
3.1.1. Numbers
3.1.2. Text
3.1.3. Lists
3.2. First Steps Towards Programming
4. More Control Flow Tools
4.1. if Statements
4.2. for Statements
4.3. The range() Function
4.4. break and continue Statements
4.5. else Clauses on Loops
4.6. pass Statements
4.7. match Statements
4.8. Defining Functions
4.9. More on Defining Functions
4.9.1. Default Argument Values
4.9.2. Keyword Arguments
4.9.3. Special parameters
4.9.3.1. Positional-or-Keyword Arguments
4.9.3.2. Positional-Only Parameters
4.9.3.3. Keyword-Only Arguments
4.9.3.4. Function Examples
4.9.3.5. Recap
4.9.4. Arbitrary Argument Lists
4.9.5. Unpacking Argument Lists
4.9.6. Lambda Expressions
4.9.7. Documentation Strings
4.9.8. Function Annotations
4.10. Intermezzo: Coding Style
5. Data Structures
5.1. More on Lists
5.1.1. Using Lists as Stacks
5.1.2. Using Lists as Queues
5.1.3. List Comprehensions
5.1.4. Nested List Comprehensions
5.2. The del statement
5.3. Tuples and Sequences
5.4. Sets
5.5. Dictionaries
5.6. Looping Techniques
5.7. More on Conditions
5.8. Comparing Sequences and Other Types
6. Modules
6.1. More on Modules
6.1.1. Executing modules as scripts
6.1.2. The Module Search Path
6.1.3. “Compiled” Python files
6.2. Standard Modules
6.3. The dir() Function
6.4. Packages
6.4.1. Importing * From a Package
6.4.2. Intra-package References
6.4.3. Packages in Multiple Directories
7. Input and Output
7.1. Fancier Output Formatting
7.1.1. Formatted String Literals
7.1.2. The String format() Method
7.1.3. Manual String Formatting
7.1.4. Old string formatting
7.2. Reading and Writing Files
7.2.1. Methods of File Objects
7.2.2. Saving structured data with json
8. Errors and Exceptions
8.1. Syntax Errors
8.2. Exceptions
8.3. Handling Exceptions
8.4. Raising Exceptions
8.5. Exception Chaining
8.6. User-defined Exceptions
8.7. Defining Clean-up Actions
8.8. Predefined Clean-up Actions
8.9. Raising and Handling Multiple Unrelated Exceptions
8.10. Enriching Exceptions with Notes
9. Classes
9.1. A Word About Names and Objects
9.2. Python Scopes and Namespaces
9.2.1. Scopes and Namespaces Example
9.3. A First Look at Classes
9.3.1. Class Definition Syntax
9.3.2. Class Objects
9.3.3. Instance Objects
9.3.4. Method Objects
9.3.5. Class and Instance Variables
9.4. Random Remarks
9.5. Inheritance
9.5.1. Multiple Inheritance
9.6. Private Variables
9.7. Odds and Ends
9.8. Iterators
9.9. Generators
9.10. Generator Expressions
10. Brief Tour of the Standard Library
10.1. Operating System Interface
10.2. File Wildcards
10.3. Command Line Arguments
10.4. Error Output Redirection and Program Termination
10.5. String Pattern Matching
10.6. Mathematics
10.7. Internet Access
10.8. Dates and Times
10.9. Data Compression
10.10. Performance Measurement
10.11. Quality Control
10.12. Batteries Included
11. Brief Tour of the Standard Library — Part II
11.1. Output Formatting
11.2. Templating
11.3. Working with Binary Data Record Layouts
11.4. Multi-threading
11.5. Logging
11.6. Weak References
11.7. Tools for Working with Lists
11.8. Decimal Floating-Point Arithmetic
12. Virtual Environments and Packages
12.1. Introduction
12.2. Creating Virtual Environments
12.3. Managing Packages with pip
13. What Now?
14. Interactive Input Editing and History Substitution
14.1. Tab Completion and History Editing
14.2. Alternatives to the Interactive Interpreter
15. Floating-Point Arithmetic: Issues and Limitations
15.1. Representation Error
16. Appendix
16.1. Interactive Mode
16.1.1. Error Handling
16.1.2. Executable Python Scripts
16.1.3. The Interactive Startup File
16.1.4. The Customization Modules",html > body > div:nth-of-type(3) > div,{'class': 'documentwrapper'}
https://docs.python.org/3/tutorial/index.html,div,div,container,container,False,True,True,"The Python Tutorial

Python is an easy to learn, powerful programming language. It has efficient high-level data structures and a simple but effective approach to object-oriented programming. Python’s elegant syntax and dynamic typing, together with its interpreted nature, make it an ideal language for scripting and rapid application development in many areas on most platforms.

The Python interpreter and the extensive standard library are freely available in source or binary form for all major platforms from the Python web site, https://www.python.org/, and may be freely distributed. The same site also contains distributions of and pointers to many free third party Python modules, programs and tools, and additional documentation.

The Python interpreter is easily extended with new functions and data types implemented in C or C++ (or other languages callable from C). Python is also suitable as an extension language for customizable applications.

This tutorial introduces the reader informally to the basic concepts and features of the Python language and system. It helps to have a Python interpreter handy for hands-on experience, but all examples are self-contained, so the tutorial can be read off-line as well.

For a description of standard objects and modules, see The Python Standard Library. The Python Language Reference gives a more formal definition of the language. To write extensions in C or C++, read Extending and Embedding the Python Interpreter and Python/C API Reference Manual. There are also several books covering Python in depth.

This tutorial does not attempt to be comprehensive and cover every single feature, or even every commonly used feature. Instead, it introduces many of Python’s most noteworthy features, and will give you a good idea of the language’s flavor and style. After reading it, you will be able to read and write Python modules and programs, and you will be ready to learn more about the various Python library modules described in The Python Standard Library.

The Glossary is also worth going through.

1. Whetting Your Appetite
2. Using the Python Interpreter
2.1. Invoking the Interpreter
2.1.1. Argument Passing
2.1.2. Interactive Mode
2.2. The Interpreter and Its Environment
2.2.1. Source Code Encoding
3. An Informal Introduction to Python
3.1. Using Python as a Calculator
3.1.1. Numbers
3.1.2. Text
3.1.3. Lists
3.2. First Steps Towards Programming
4. More Control Flow Tools
4.1. if Statements
4.2. for Statements
4.3. The range() Function
4.4. break and continue Statements
4.5. else Clauses on Loops
4.6. pass Statements
4.7. match Statements
4.8. Defining Functions
4.9. More on Defining Functions
4.9.1. Default Argument Values
4.9.2. Keyword Arguments
4.9.3. Special parameters
4.9.3.1. Positional-or-Keyword Arguments
4.9.3.2. Positional-Only Parameters
4.9.3.3. Keyword-Only Arguments
4.9.3.4. Function Examples
4.9.3.5. Recap
4.9.4. Arbitrary Argument Lists
4.9.5. Unpacking Argument Lists
4.9.6. Lambda Expressions
4.9.7. Documentation Strings
4.9.8. Function Annotations
4.10. Intermezzo: Coding Style
5. Data Structures
5.1. More on Lists
5.1.1. Using Lists as Stacks
5.1.2. Using Lists as Queues
5.1.3. List Comprehensions
5.1.4. Nested List Comprehensions
5.2. The del statement
5.3. Tuples and Sequences
5.4. Sets
5.5. Dictionaries
5.6. Looping Techniques
5.7. More on Conditions
5.8. Comparing Sequences and Other Types
6. Modules
6.1. More on Modules
6.1.1. Executing modules as scripts
6.1.2. The Module Search Path
6.1.3. “Compiled” Python files
6.2. Standard Modules
6.3. The dir() Function
6.4. Packages
6.4.1. Importing * From a Package
6.4.2. Intra-package References
6.4.3. Packages in Multiple Directories
7. Input and Output
7.1. Fancier Output Formatting
7.1.1. Formatted String Literals
7.1.2. The String format() Method
7.1.3. Manual String Formatting
7.1.4. Old string formatting
7.2. Reading and Writing Files
7.2.1. Methods of File Objects
7.2.2. Saving structured data with json
8. Errors and Exceptions
8.1. Syntax Errors
8.2. Exceptions
8.3. Handling Exceptions
8.4. Raising Exceptions
8.5. Exception Chaining
8.6. User-defined Exceptions
8.7. Defining Clean-up Actions
8.8. Predefined Clean-up Actions
8.9. Raising and Handling Multiple Unrelated Exceptions
8.10. Enriching Exceptions with Notes
9. Classes
9.1. A Word About Names and Objects
9.2. Python Scopes and Namespaces
9.2.1. Scopes and Namespaces Example
9.3. A First Look at Classes
9.3.1. Class Definition Syntax
9.3.2. Class Objects
9.3.3. Instance Objects
9.3.4. Method Objects
9.3.5. Class and Instance Variables
9.4. Random Remarks
9.5. Inheritance
9.5.1. Multiple Inheritance
9.6. Private Variables
9.7. Odds and Ends
9.8. Iterators
9.9. Generators
9.10. Generator Expressions
10. Brief Tour of the Standard Library
10.1. Operating System Interface
10.2. File Wildcards
10.3. Command Line Arguments
10.4. Error Output Redirection and Program Termination
10.5. String Pattern Matching
10.6. Mathematics
10.7. Internet Access
10.8. Dates and Times
10.9. Data Compression
10.10. Performance Measurement
10.11. Quality Control
10.12. Batteries Included
11. Brief Tour of the Standard Library — Part II
11.1. Output Formatting
11.2. Templating
11.3. Working with Binary Data Record Layouts
11.4. Multi-threading
11.5. Logging
11.6. Weak References
11.7. Tools for Working with Lists
11.8. Decimal Floating-Point Arithmetic
12. Virtual Environments and Packages
12.1. Introduction
12.2. Creating Virtual Environments
12.3. Managing Packages with pip
13. What Now?
14. Interactive Input Editing and History Substitution
14.1. Tab Completion and History Editing
14.2. Alternatives to the Interactive Interpreter
15. Floating-Point Arithmetic: Issues and Limitations
15.1. Representation Error
16. Appendix
16.1. Interactive Mode
16.1.1. Error Handling
16.1.2. Executable Python Scripts
16.1.3. The Interactive Startup File
16.1.4. The Customization Modules",html > body > div:nth-of-type(3) > div > div,{'class': 'bodywrapper'}
https://docs.python.org/3/tutorial/index.html,div,div,content,content,False,True,True,"The Python Tutorial

Python is an easy to learn, powerful programming language. It has efficient high-level data structures and a simple but effective approach to object-oriented programming. Python’s elegant syntax and dynamic typing, together with its interpreted nature, make it an ideal language for scripting and rapid application development in many areas on most platforms.

The Python interpreter and the extensive standard library are freely available in source or binary form for all major platforms from the Python web site, https://www.python.org/, and may be freely distributed. The same site also contains distributions of and pointers to many free third party Python modules, programs and tools, and additional documentation.

The Python interpreter is easily extended with new functions and data types implemented in C or C++ (or other languages callable from C). Python is also suitable as an extension language for customizable applications.

This tutorial introduces the reader informally to the basic concepts and features of the Python language and system. It helps to have a Python interpreter handy for hands-on experience, but all examples are self-contained, so the tutorial can be read off-line as well.

For a description of standard objects and modules, see The Python Standard Library. The Python Language Reference gives a more formal definition of the language. To write extensions in C or C++, read Extending and Embedding the Python Interpreter and Python/C API Reference Manual. There are also several books covering Python in depth.

This tutorial does not attempt to be comprehensive and cover every single feature, or even every commonly used feature. Instead, it introduces many of Python’s most noteworthy features, and will give you a good idea of the language’s flavor and style. After reading it, you will be able to read and write Python modules and programs, and you will be ready to learn more about the various Python library modules described in The Python Standard Library.

The Glossary is also worth going through.

1. Whetting Your Appetite
2. Using the Python Interpreter
2.1. Invoking the Interpreter
2.1.1. Argument Passing
2.1.2. Interactive Mode
2.2. The Interpreter and Its Environment
2.2.1. Source Code Encoding
3. An Informal Introduction to Python
3.1. Using Python as a Calculator
3.1.1. Numbers
3.1.2. Text
3.1.3. Lists
3.2. First Steps Towards Programming
4. More Control Flow Tools
4.1. if Statements
4.2. for Statements
4.3. The range() Function
4.4. break and continue Statements
4.5. else Clauses on Loops
4.6. pass Statements
4.7. match Statements
4.8. Defining Functions
4.9. More on Defining Functions
4.9.1. Default Argument Values
4.9.2. Keyword Arguments
4.9.3. Special parameters
4.9.3.1. Positional-or-Keyword Arguments
4.9.3.2. Positional-Only Parameters
4.9.3.3. Keyword-Only Arguments
4.9.3.4. Function Examples
4.9.3.5. Recap
4.9.4. Arbitrary Argument Lists
4.9.5. Unpacking Argument Lists
4.9.6. Lambda Expressions
4.9.7. Documentation Strings
4.9.8. Function Annotations
4.10. Intermezzo: Coding Style
5. Data Structures
5.1. More on Lists
5.1.1. Using Lists as Stacks
5.1.2. Using Lists as Queues
5.1.3. List Comprehensions
5.1.4. Nested List Comprehensions
5.2. The del statement
5.3. Tuples and Sequences
5.4. Sets
5.5. Dictionaries
5.6. Looping Techniques
5.7. More on Conditions
5.8. Comparing Sequences and Other Types
6. Modules
6.1. More on Modules
6.1.1. Executing modules as scripts
6.1.2. The Module Search Path
6.1.3. “Compiled” Python files
6.2. Standard Modules
6.3. The dir() Function
6.4. Packages
6.4.1. Importing * From a Package
6.4.2. Intra-package References
6.4.3. Packages in Multiple Directories
7. Input and Output
7.1. Fancier Output Formatting
7.1.1. Formatted String Literals
7.1.2. The String format() Method
7.1.3. Manual String Formatting
7.1.4. Old string formatting
7.2. Reading and Writing Files
7.2.1. Methods of File Objects
7.2.2. Saving structured data with json
8. Errors and Exceptions
8.1. Syntax Errors
8.2. Exceptions
8.3. Handling Exceptions
8.4. Raising Exceptions
8.5. Exception Chaining
8.6. User-defined Exceptions
8.7. Defining Clean-up Actions
8.8. Predefined Clean-up Actions
8.9. Raising and Handling Multiple Unrelated Exceptions
8.10. Enriching Exceptions with Notes
9. Classes
9.1. A Word About Names and Objects
9.2. Python Scopes and Namespaces
9.2.1. Scopes and Namespaces Example
9.3. A First Look at Classes
9.3.1. Class Definition Syntax
9.3.2. Class Objects
9.3.3. Instance Objects
9.3.4. Method Objects
9.3.5. Class and Instance Variables
9.4. Random Remarks
9.5. Inheritance
9.5.1. Multiple Inheritance
9.6. Private Variables
9.7. Odds and Ends
9.8. Iterators
9.9. Generators
9.10. Generator Expressions
10. Brief Tour of the Standard Library
10.1. Operating System Interface
10.2. File Wildcards
10.3. Command Line Arguments
10.4. Error Output Redirection and Program Termination
10.5. String Pattern Matching
10.6. Mathematics
10.7. Internet Access
10.8. Dates and Times
10.9. Data Compression
10.10. Performance Measurement
10.11. Quality Control
10.12. Batteries Included
11. Brief Tour of the Standard Library — Part II
11.1. Output Formatting
11.2. Templating
11.3. Working with Binary Data Record Layouts
11.4. Multi-threading
11.5. Logging
11.6. Weak References
11.7. Tools for Working with Lists
11.8. Decimal Floating-Point Arithmetic
12. Virtual Environments and Packages
12.1. Introduction
12.2. Creating Virtual Environments
12.3. Managing Packages with pip
13. What Now?
14. Interactive Input Editing and History Substitution
14.1. Tab Completion and History Editing
14.2. Alternatives to the Interactive Interpreter
15. Floating-Point Arithmetic: Issues and Limitations
15.1. Representation Error
16. Appendix
16.1. Interactive Mode
16.1.1. Error Handling
16.1.2. Executable Python Scripts
16.1.3. The Interactive Startup File
16.1.4. The Customization Modules",html > body > div:nth-of-type(3) > div > div > div,"{'class': 'body', 'role': 'main'}"
https://docs.python.org/3/tutorial/index.html,section,section,content,content,False,True,True,"The Python Tutorial

Python is an easy to learn, powerful programming language. It has efficient high-level data structures and a simple but effective approach to object-oriented programming. Python’s elegant syntax and dynamic typing, together with its interpreted nature, make it an ideal language for scripting and rapid application development in many areas on most platforms.

The Python interpreter and the extensive standard library are freely available in source or binary form for all major platforms from the Python web site, https://www.python.org/, and may be freely distributed. The same site also contains distributions of and pointers to many free third party Python modules, programs and tools, and additional documentation.

The Python interpreter is easily extended with new functions and data types implemented in C or C++ (or other languages callable from C). Python is also suitable as an extension language for customizable applications.

This tutorial introduces the reader informally to the basic concepts and features of the Python language and system. It helps to have a Python interpreter handy for hands-on experience, but all examples are self-contained, so the tutorial can be read off-line as well.

For a description of standard objects and modules, see The Python Standard Library. The Python Language Reference gives a more formal definition of the language. To write extensions in C or C++, read Extending and Embedding the Python Interpreter and Python/C API Reference Manual. There are also several books covering Python in depth.

This tutorial does not attempt to be comprehensive and cover every single feature, or even every commonly used feature. Instead, it introduces many of Python’s most noteworthy features, and will give you a good idea of the language’s flavor and style. After reading it, you will be able to read and write Python modules and programs, and you will be ready to learn more about the various Python library modules described in The Python Standard Library.

The Glossary is also worth going through.

1. Whetting Your Appetite
2. Using the Python Interpreter
2.1. Invoking the Interpreter
2.1.1. Argument Passing
2.1.2. Interactive Mode
2.2. The Interpreter and Its Environment
2.2.1. Source Code Encoding
3. An Informal Introduction to Python
3.1. Using Python as a Calculator
3.1.1. Numbers
3.1.2. Text
3.1.3. Lists
3.2. First Steps Towards Programming
4. More Control Flow Tools
4.1. if Statements
4.2. for Statements
4.3. The range() Function
4.4. break and continue Statements
4.5. else Clauses on Loops
4.6. pass Statements
4.7. match Statements
4.8. Defining Functions
4.9. More on Defining Functions
4.9.1. Default Argument Values
4.9.2. Keyword Arguments
4.9.3. Special parameters
4.9.3.1. Positional-or-Keyword Arguments
4.9.3.2. Positional-Only Parameters
4.9.3.3. Keyword-Only Arguments
4.9.3.4. Function Examples
4.9.3.5. Recap
4.9.4. Arbitrary Argument Lists
4.9.5. Unpacking Argument Lists
4.9.6. Lambda Expressions
4.9.7. Documentation Strings
4.9.8. Function Annotations
4.10. Intermezzo: Coding Style
5. Data Structures
5.1. More on Lists
5.1.1. Using Lists as Stacks
5.1.2. Using Lists as Queues
5.1.3. List Comprehensions
5.1.4. Nested List Comprehensions
5.2. The del statement
5.3. Tuples and Sequences
5.4. Sets
5.5. Dictionaries
5.6. Looping Techniques
5.7. More on Conditions
5.8. Comparing Sequences and Other Types
6. Modules
6.1. More on Modules
6.1.1. Executing modules as scripts
6.1.2. The Module Search Path
6.1.3. “Compiled” Python files
6.2. Standard Modules
6.3. The dir() Function
6.4. Packages
6.4.1. Importing * From a Package
6.4.2. Intra-package References
6.4.3. Packages in Multiple Directories
7. Input and Output
7.1. Fancier Output Formatting
7.1.1. Formatted String Literals
7.1.2. The String format() Method
7.1.3. Manual String Formatting
7.1.4. Old string formatting
7.2. Reading and Writing Files
7.2.1. Methods of File Objects
7.2.2. Saving structured data with json
8. Errors and Exceptions
8.1. Syntax Errors
8.2. Exceptions
8.3. Handling Exceptions
8.4. Raising Exceptions
8.5. Exception Chaining
8.6. User-defined Exceptions
8.7. Defining Clean-up Actions
8.8. Predefined Clean-up Actions
8.9. Raising and Handling Multiple Unrelated Exceptions
8.10. Enriching Exceptions with Notes
9. Classes
9.1. A Word About Names and Objects
9.2. Python Scopes and Namespaces
9.2.1. Scopes and Namespaces Example
9.3. A First Look at Classes
9.3.1. Class Definition Syntax
9.3.2. Class Objects
9.3.3. Instance Objects
9.3.4. Method Objects
9.3.5. Class and Instance Variables
9.4. Random Remarks
9.5. Inheritance
9.5.1. Multiple Inheritance
9.6. Private Variables
9.7. Odds and Ends
9.8. Iterators
9.9. Generators
9.10. Generator Expressions
10. Brief Tour of the Standard Library
10.1. Operating System Interface
10.2. File Wildcards
10.3. Command Line Arguments
10.4. Error Output Redirection and Program Termination
10.5. String Pattern Matching
10.6. Mathematics
10.7. Internet Access
10.8. Dates and Times
10.9. Data Compression
10.10. Performance Measurement
10.11. Quality Control
10.12. Batteries Included
11. Brief Tour of the Standard Library — Part II
11.1. Output Formatting
11.2. Templating
11.3. Working with Binary Data Record Layouts
11.4. Multi-threading
11.5. Logging
11.6. Weak References
11.7. Tools for Working with Lists
11.8. Decimal Floating-Point Arithmetic
12. Virtual Environments and Packages
12.1. Introduction
12.2. Creating Virtual Environments
12.3. Managing Packages with pip
13. What Now?
14. Interactive Input Editing and History Substitution
14.1. Tab Completion and History Editing
14.2. Alternatives to the Interactive Interpreter
15. Floating-Point Arithmetic: Issues and Limitations
15.1. Representation Error
16. Appendix
16.1. Interactive Mode
16.1.1. Error Handling
16.1.2. Executable Python Scripts
16.1.3. The Interactive Startup File
16.1.4. The Customization Modules",section#the-python-tutorial,{'id': 'the-python-tutorial'}
https://docs.python.org/3/tutorial/index.html,ul,ul,unknown,container,False,True,True,"1. Whetting Your Appetite
2. Using the Python Interpreter
2.1. Invoking the Interpreter
2.1.1. Argument Passing
2.1.2. Interactive Mode
2.2. The Interpreter and Its Environment
2.2.1. Source Code Encoding
3. An Informal Introduction to Python
3.1. Using Python as a Calculator
3.1.1. Numbers
3.1.2. Text
3.1.3. Lists
3.2. First Steps Towards Programming
4. More Control Flow Tools
4.1. if Statements
4.2. for Statements
4.3. The range() Function
4.4. break and continue Statements
4.5. else Clauses on Loops
4.6. pass Statements
4.7. match Statements
4.8. Defining Functions
4.9. More on Defining Functions
4.9.1. Default Argument Values
4.9.2. Keyword Arguments
4.9.3. Special parameters
4.9.3.1. Positional-or-Keyword Arguments
4.9.3.2. Positional-Only Parameters
4.9.3.3. Keyword-Only Arguments
4.9.3.4. Function Examples
4.9.3.5. Recap
4.9.4. Arbitrary Argument Lists
4.9.5. Unpacking Argument Lists
4.9.6. Lambda Expressions
4.9.7. Documentation Strings
4.9.8. Function Annotations
4.10. Intermezzo: Coding Style
5. Data Structures
5.1. More on Lists
5.1.1. Using Lists as Stacks
5.1.2. Using Lists as Queues
5.1.3. List Comprehensions
5.1.4. Nested List Comprehensions
5.2. The del statement
5.3. Tuples and Sequences
5.4. Sets
5.5. Dictionaries
5.6. Looping Techniques
5.7. More on Conditions
5.8. Comparing Sequences and Other Types
6. Modules
6.1. More on Modules
6.1.1. Executing modules as scripts
6.1.2. The Module Search Path
6.1.3. “Compiled” Python files
6.2. Standard Modules
6.3. The dir() Function
6.4. Packages
6.4.1. Importing * From a Package
6.4.2. Intra-package References
6.4.3. Packages in Multiple Directories
7. Input and Output
7.1. Fancier Output Formatting
7.1.1. Formatted String Literals
7.1.2. The String format() Method
7.1.3. Manual String Formatting
7.1.4. Old string formatting
7.2. Reading and Writing Files
7.2.1. Methods of File Objects
7.2.2. Saving structured data with json
8. Errors and Exceptions
8.1. Syntax Errors
8.2. Exceptions
8.3. Handling Exceptions
8.4. Raising Exceptions
8.5. Exception Chaining
8.6. User-defined Exceptions
8.7. Defining Clean-up Actions
8.8. Predefined Clean-up Actions
8.9. Raising and Handling Multiple Unrelated Exceptions
8.10. Enriching Exceptions with Notes
9. Classes
9.1. A Word About Names and Objects
9.2. Python Scopes and Namespaces
9.2.1. Scopes and Namespaces Example
9.3. A First Look at Classes
9.3.1. Class Definition Syntax
9.3.2. Class Objects
9.3.3. Instance Objects
9.3.4. Method Objects
9.3.5. Class and Instance Variables
9.4. Random Remarks
9.5. Inheritance
9.5.1. Multiple Inheritance
9.6. Private Variables
9.7. Odds and Ends
9.8. Iterators
9.9. Generators
9.10. Generator Expressions
10. Brief Tour of the Standard Library
10.1. Operating System Interface
10.2. File Wildcards
10.3. Command Line Arguments
10.4. Error Output Redirection and Program Termination
10.5. String Pattern Matching
10.6. Mathematics
10.7. Internet Access
10.8. Dates and Times
10.9. Data Compression
10.10. Performance Measurement
10.11. Quality Control
10.12. Batteries Included
11. Brief Tour of the Standard Library — Part II
11.1. Output Formatting
11.2. Templating
11.3. Working with Binary Data Record Layouts
11.4. Multi-threading
11.5. Logging
11.6. Weak References
11.7. Tools for Working with Lists
11.8. Decimal Floating-Point Arithmetic
12. Virtual Environments and Packages
12.1. Introduction
12.2. Creating Virtual Environments
12.3. Managing Packages with pip
13. What Now?
14. Interactive Input Editing and History Substitution
14.1. Tab Completion and History Editing
14.2. Alternatives to the Interactive Interpreter
15. Floating-Point Arithmetic: Issues and Limitations
15.1. Representation Error
16. Appendix
16.1. Interactive Mode
16.1.1. Error Handling
16.1.2. Executable Python Scripts
16.1.3. The Interactive Startup File
16.1.4. The Customization Modules",section#the-python-tutorial > div > ul,{}
https://docs.python.org/3/tutorial/index.html,div,div,container,container,False,False,False,,html > body > div:nth-of-type(3) > div > div > div > div,{'class': 'clearer'}
https://docs.python.org/3/tutorial/index.html,div,div,navigation,navigation,False,True,True,"Previous topic

Changelog

Next topic

1. Whetting Your Appetite

This Page
Report a Bug
Show Source
«",html > body > div:nth-of-type(3) > div:nth-of-type(2),"{'class': 'sphinxsidebar', 'role': 'navigation', 'aria-label': 'Main'}"
https://docs.python.org/3/tutorial/index.html,div,div,container,container,False,True,True,"Previous topic

Changelog

Next topic

1. Whetting Your Appetite

This Page
Report a Bug
Show Source",html > body > div:nth-of-type(3) > div:nth-of-type(2) > div,{'class': 'sphinxsidebarwrapper'}
https://docs.python.org/3/tutorial/index.html,div,div,container,container,False,True,True,"Previous topic

Changelog",html > body > div:nth-of-type(3) > div:nth-of-type(2) > div > div,{}
https://docs.python.org/3/tutorial/index.html,h4,h4,content,content,False,True,True,Previous topic,html > body > div:nth-of-type(3) > div:nth-of-type(2) > div > div > h4,{}
https://docs.python.org/3/tutorial/index.html,p,p,content,content,False,True,True,Changelog,html > body > div:nth-of-type(3) > div:nth-of-type(2) > div > div > p,{'class': 'topless'}
https://docs.python.org/3/tutorial/index.html,div,div,container,container,False,True,True,"Next topic

1. Whetting Your Appetite",html > body > div:nth-of-type(3) > div:nth-of-type(2) > div > div:nth-of-type(2),{}
https://docs.python.org/3/tutorial/index.html,h4,h4,content,content,False,True,True,Next topic,html > body > div:nth-of-type(3) > div:nth-of-type(2) > div > div:nth-of-type(2) > h4,{}
https://docs.python.org/3/tutorial/index.html,p,p,content,content,False,True,True,1. Whetting Your Appetite,html > body > div:nth-of-type(3) > div:nth-of-type(2) > div > div:nth-of-type(2) > p,{'class': 'topless'}
https://docs.python.org/3/tutorial/index.html,div,div,container,container,False,True,True,"This Page
Report a Bug
Show Source",html > body > div:nth-of-type(3) > div:nth-of-type(2) > div > div:nth-of-type(3),"{'role': 'note', 'aria-label': 'source link'}"
https://docs.python.org/3/tutorial/index.html,h3,h3,content,content,False,True,True,This Page,html > body > div:nth-of-type(3) > div:nth-of-type(2) > div > div:nth-of-type(3) > h3,{}
https://docs.python.org/3/tutorial/index.html,ul,ul,unknown,container,False,True,True,"Report a Bug
Show Source",html > body > div:nth-of-type(3) > div:nth-of-type(2) > div > div:nth-of-type(3) > ul,{'class': 'this-page-menu'}
https://docs.python.org/3/tutorial/index.html,div,div,container,container,False,True,True,«,div#sidebarbutton,"{'id': 'sidebarbutton', 'title': 'Collapse sidebar'}"
https://docs.python.org/3/tutorial/index.html,span,span,container,container,False,True,True,«,div#sidebarbutton > span,{}
https://docs.python.org/3/tutorial/index.html,div,div,container,container,False,False,False,,html > body > div:nth-of-type(3) > div:nth-of-type(3),{'class': 'clearer'}
https://docs.python.org/3/tutorial/index.html,h3,h3,content,content,False,False,True,Navigation,html > body > div:nth-of-type(4) > h3,{}
https://docs.python.org/3/tutorial/index.html,ul,ul,unknown,container,False,True,True,"index
modules |
next |
previous |
 Python » 
English
Spanish
French
Italian
Japanese
Korean
Polish
Brazilian Portuguese
Turkish
Simplified Chinese
Traditional Chinese
dev (3.14)
3.13.1
3.12
3.11
3.10
3.9
3.8
3.7
3.6
3.5
3.4
3.3
3.2
3.1
3.0
2.7
2.6
 3.13.1 Documentation » The Python Tutorial
  |
Theme 
Auto
Light
Dark
 |",html > body > div:nth-of-type(4) > ul,{}
https://docs.python.org/3/tutorial/index.html,select,select,interactive,interactive,True,True,True,"English
Spanish
French
Italian
Japanese
Korean
Polish
Brazilian Portuguese
Turkish
Simplified Chinese
Traditional Chinese",html > body > div:nth-of-type(4) > ul > li:nth-of-type(7) > div > select,{'class': 'language-select'}
https://docs.python.org/3/tutorial/index.html,select,select,interactive,interactive,True,True,True,"dev (3.14)
3.13.1
3.12
3.11
3.10
3.9
3.8
3.7
3.6
3.5
3.4
3.3
3.2
3.1
3.0
2.7
2.6",html > body > div:nth-of-type(4) > ul > li:nth-of-type(7) > div:nth-of-type(2) > select,{'class': 'version-select'}
https://docs.python.org/3/tutorial/index.html,form,form,interactive,container,False,True,False,,html > body > div:nth-of-type(4) > ul > li:nth-of-type(11) > div > form,"{'class': 'inline-search', 'action': '../search.html', 'method': 'get'}"
https://docs.python.org/3/tutorial/index.html,a,a,navigation,interactive,True,True,True,Copyright,html > body > div:nth-of-type(5) > a,{'href': '../copyright.html'}
https://docs.python.org/3/tutorial/index.html,br,br,unknown,container,False,False,False,,html > body > div:nth-of-type(5) > br,{}
https://docs.python.org/3/tutorial/index.html,br,br,unknown,container,False,False,False,,html > body > div:nth-of-type(5) > br:nth-of-type(2),{}
https://docs.python.org/3/tutorial/index.html,br,br,unknown,container,False,False,False,,html > body > div:nth-of-type(5) > br:nth-of-type(3),{}
https://docs.python.org/3/tutorial/index.html,a,a,navigation,interactive,True,True,True,History and License,html > body > div:nth-of-type(5) > a:nth-of-type(2),{'href': '/license.html'}
https://docs.python.org/3/tutorial/index.html,br,br,unknown,container,False,False,False,,html > body > div:nth-of-type(5) > br:nth-of-type(4),{}
https://docs.python.org/3/tutorial/index.html,br,br,unknown,container,False,False,False,,html > body > div:nth-of-type(5) > br:nth-of-type(5),{}
https://docs.python.org/3/tutorial/index.html,a,a,navigation,interactive,True,True,True,Please donate.,html > body > div:nth-of-type(5) > a:nth-of-type(3),{'href': 'https://www.python.org/psf/donations/'}
https://docs.python.org/3/tutorial/index.html,br,br,unknown,container,False,False,False,,html > body > div:nth-of-type(5) > br:nth-of-type(6),{}
https://docs.python.org/3/tutorial/index.html,br,br,unknown,container,False,False,False,,html > body > div:nth-of-type(5) > br:nth-of-type(7),{}
https://docs.python.org/3/tutorial/index.html,a,a,navigation,interactive,True,True,True,Found a bug,html > body > div:nth-of-type(5) > a:nth-of-type(4),{'href': '/bugs.html'}
https://docs.python.org/3/tutorial/index.html,br,br,unknown,container,False,False,False,,html > body > div:nth-of-type(5) > br:nth-of-type(8),{}
https://docs.python.org/3/tutorial/index.html,a,a,navigation,interactive,True,True,True,Sphinx,html > body > div:nth-of-type(5) > a:nth-of-type(5),{'href': 'https://www.sphinx-doc.org/'}
https://docs.python.org/3/tutorial/index.html,section,section,content,content,False,True,True,"The Python Tutorial

Python is an easy to learn, powerful programming language. It has efficient high-level data structures and a simple but effective approach to object-oriented programming. Python’s elegant syntax and dynamic typing, together with its interpreted nature, make it an ideal language for scripting and rapid application development in many areas on most platforms.

The Python interpreter and the extensive standard library are freely available in source or binary form for all major platforms from the Python web site, https://www.python.org/, and may be freely distributed. The same site also contains distributions of and pointers to many free third party Python modules, programs and tools, and additional documentation.

The Python interpreter is easily extended with new functions and data types implemented in C or C++ (or other languages callable from C). Python is also suitable as an extension language for customizable applications.

This tutorial introduces the reader informally to the basic concepts and features of the Python language and system. It helps to have a Python interpreter handy for hands-on experience, but all examples are self-contained, so the tutorial can be read off-line as well.

For a description of standard objects and modules, see The Python Standard Library. The Python Language Reference gives a more formal definition of the language. To write extensions in C or C++, read Extending and Embedding the Python Interpreter and Python/C API Reference Manual. There are also several books covering Python in depth.

This tutorial does not attempt to be comprehensive and cover every single feature, or even every commonly used feature. Instead, it introduces many of Python’s most noteworthy features, and will give you a good idea of the language’s flavor and style. After reading it, you will be able to read and write Python modules and programs, and you will be ready to learn more about the various Python library modules described in The Python Standard Library.

The Glossary is also worth going through.

1. Whetting Your Appetite
2. Using the Python Interpreter
2.1. Invoking the Interpreter
2.1.1. Argument Passing
2.1.2. Interactive Mode
2.2. The Interpreter and Its Environment
2.2.1. Source Code Encoding
3. An Informal Introduction to Python
3.1. Using Python as a Calculator
3.1.1. Numbers
3.1.2. Text
3.1.3. Lists
3.2. First Steps Towards Programming
4. More Control Flow Tools
4.1. if Statements
4.2. for Statements
4.3. The range() Function
4.4. break and continue Statements
4.5. else Clauses on Loops
4.6. pass Statements
4.7. match Statements
4.8. Defining Functions
4.9. More on Defining Functions
4.9.1. Default Argument Values
4.9.2. Keyword Arguments
4.9.3. Special parameters
4.9.3.1. Positional-or-Keyword Arguments
4.9.3.2. Positional-Only Parameters
4.9.3.3. Keyword-Only Arguments
4.9.3.4. Function Examples
4.9.3.5. Recap
4.9.4. Arbitrary Argument Lists
4.9.5. Unpacking Argument Lists
4.9.6. Lambda Expressions
4.9.7. Documentation Strings
4.9.8. Function Annotations
4.10. Intermezzo: Coding Style
5. Data Structures
5.1. More on Lists
5.1.1. Using Lists as Stacks
5.1.2. Using Lists as Queues
5.1.3. List Comprehensions
5.1.4. Nested List Comprehensions
5.2. The del statement
5.3. Tuples and Sequences
5.4. Sets
5.5. Dictionaries
5.6. Looping Techniques
5.7. More on Conditions
5.8. Comparing Sequences and Other Types
6. Modules
6.1. More on Modules
6.1.1. Executing modules as scripts
6.1.2. The Module Search Path
6.1.3. “Compiled” Python files
6.2. Standard Modules
6.3. The dir() Function
6.4. Packages
6.4.1. Importing * From a Package
6.4.2. Intra-package References
6.4.3. Packages in Multiple Directories
7. Input and Output
7.1. Fancier Output Formatting
7.1.1. Formatted String Literals
7.1.2. The String format() Method
7.1.3. Manual String Formatting
7.1.4. Old string formatting
7.2. Reading and Writing Files
7.2.1. Methods of File Objects
7.2.2. Saving structured data with json
8. Errors and Exceptions
8.1. Syntax Errors
8.2. Exceptions
8.3. Handling Exceptions
8.4. Raising Exceptions
8.5. Exception Chaining
8.6. User-defined Exceptions
8.7. Defining Clean-up Actions
8.8. Predefined Clean-up Actions
8.9. Raising and Handling Multiple Unrelated Exceptions
8.10. Enriching Exceptions with Notes
9. Classes
9.1. A Word About Names and Objects
9.2. Python Scopes and Namespaces
9.2.1. Scopes and Namespaces Example
9.3. A First Look at Classes
9.3.1. Class Definition Syntax
9.3.2. Class Objects
9.3.3. Instance Objects
9.3.4. Method Objects
9.3.5. Class and Instance Variables
9.4. Random Remarks
9.5. Inheritance
9.5.1. Multiple Inheritance
9.6. Private Variables
9.7. Odds and Ends
9.8. Iterators
9.9. Generators
9.10. Generator Expressions
10. Brief Tour of the Standard Library
10.1. Operating System Interface
10.2. File Wildcards
10.3. Command Line Arguments
10.4. Error Output Redirection and Program Termination
10.5. String Pattern Matching
10.6. Mathematics
10.7. Internet Access
10.8. Dates and Times
10.9. Data Compression
10.10. Performance Measurement
10.11. Quality Control
10.12. Batteries Included
11. Brief Tour of the Standard Library — Part II
11.1. Output Formatting
11.2. Templating
11.3. Working with Binary Data Record Layouts
11.4. Multi-threading
11.5. Logging
11.6. Weak References
11.7. Tools for Working with Lists
11.8. Decimal Floating-Point Arithmetic
12. Virtual Environments and Packages
12.1. Introduction
12.2. Creating Virtual Environments
12.3. Managing Packages with pip
13. What Now?
14. Interactive Input Editing and History Substitution
14.1. Tab Completion and History Editing
14.2. Alternatives to the Interactive Interpreter
15. Floating-Point Arithmetic: Issues and Limitations
15.1. Representation Error
16. Appendix
16.1. Interactive Mode
16.1.1. Error Handling
16.1.2. Executable Python Scripts
16.1.3. The Interactive Startup File
16.1.4. The Customization Modules",section#the-python-tutorial,{'id': 'the-python-tutorial'}
https://docs.python.org/3/tutorial/index.html,p,p,content,content,False,False,True,Changelog,html > body > div > div > nav > div:nth-of-type(2) > p,{'class': 'topless'}
https://docs.python.org/3/tutorial/index.html,p,p,content,content,False,False,True,1. Whetting Your Appetite,html > body > div > div > nav > div:nth-of-type(3) > p,{'class': 'topless'}
https://docs.python.org/3/tutorial/index.html,p,p,content,content,False,True,True,"Python is an easy to learn, powerful programming language. It has efficient high-level data structures and a simple but effective approach to object-oriented programming. Python’s elegant syntax and dynamic typing, together with its interpreted nature, make it an ideal language for scripting and rapid application development in many areas on most platforms.",section#the-python-tutorial > p,{}
https://docs.python.org/3/tutorial/index.html,p,p,content,content,False,True,True,"The Python interpreter and the extensive standard library are freely available in source or binary form for all major platforms from the Python web site, https://www.python.org/, and may be freely distributed. The same site also contains distributions of and pointers to many free third party Python modules, programs and tools, and additional documentation.",section#the-python-tutorial > p:nth-of-type(2),{}
https://docs.python.org/3/tutorial/index.html,p,p,content,content,False,True,True,The Python interpreter is easily extended with new functions and data types implemented in C or C++ (or other languages callable from C). Python is also suitable as an extension language for customizable applications.,section#the-python-tutorial > p:nth-of-type(3),{}
https://docs.python.org/3/tutorial/index.html,p,p,content,content,False,True,True,"This tutorial introduces the reader informally to the basic concepts and features of the Python language and system. It helps to have a Python interpreter handy for hands-on experience, but all examples are self-contained, so the tutorial can be read off-line as well.",section#the-python-tutorial > p:nth-of-type(4),{}
https://docs.python.org/3/tutorial/index.html,p,p,content,content,False,True,True,"For a description of standard objects and modules, see The Python Standard Library. The Python Language Reference gives a more formal definition of the language. To write extensions in C or C++, read Extending and Embedding the Python Interpreter and Python/C API Reference Manual. There are also several books covering Python in depth.",section#the-python-tutorial > p:nth-of-type(5),{}
https://docs.python.org/3/tutorial/index.html,p,p,content,content,False,True,True,"This tutorial does not attempt to be comprehensive and cover every single feature, or even every commonly used feature. Instead, it introduces many of Python’s most noteworthy features, and will give you a good idea of the language’s flavor and style. After reading it, you will be able to read and write Python modules and programs, and you will be ready to learn more about the various Python library modules described in The Python Standard Library.",section#the-python-tutorial > p:nth-of-type(6),{}
https://docs.python.org/3/tutorial/index.html,p,p,content,content,False,True,True,The Glossary is also worth going through.,section#the-python-tutorial > p:nth-of-type(7),{}
https://docs.python.org/3/tutorial/index.html,p,p,content,content,False,True,True,Changelog,html > body > div:nth-of-type(3) > div:nth-of-type(2) > div > div > p,{'class': 'topless'}
https://docs.python.org/3/tutorial/index.html,p,p,content,content,False,True,True,1. Whetting Your Appetite,html > body > div:nth-of-type(3) > div:nth-of-type(2) > div > div:nth-of-type(2) > p,{'class': 'topless'}
https://docs.python.org/3/tutorial/index.html,h4,h4,content,content,False,False,True,Previous topic,html > body > div > div > nav > div:nth-of-type(2) > h4,{}
https://docs.python.org/3/tutorial/index.html,h4,h4,content,content,False,False,True,Next topic,html > body > div > div > nav > div:nth-of-type(3) > h4,{}
https://docs.python.org/3/tutorial/index.html,h3,h3,content,content,False,False,True,This Page,html > body > div > div > nav > div:nth-of-type(4) > h3,{}
https://docs.python.org/3/tutorial/index.html,h3,h3,content,content,False,False,True,Navigation,html > body > div:nth-of-type(2) > h3,{}
https://docs.python.org/3/tutorial/index.html,h1,h1,content,content,False,True,True,The Python Tutorial,section#the-python-tutorial > h1,{}
https://docs.python.org/3/tutorial/index.html,h4,h4,content,content,False,True,True,Previous topic,html > body > div:nth-of-type(3) > div:nth-of-type(2) > div > div > h4,{}
https://docs.python.org/3/tutorial/index.html,h4,h4,content,content,False,True,True,Next topic,html > body > div:nth-of-type(3) > div:nth-of-type(2) > div > div:nth-of-type(2) > h4,{}
https://docs.python.org/3/tutorial/index.html,h3,h3,content,content,False,True,True,This Page,html > body > div:nth-of-type(3) > div:nth-of-type(2) > div > div:nth-of-type(3) > h3,{}
https://docs.python.org/3/tutorial/index.html,h3,h3,content,content,False,False,True,Navigation,html > body > div:nth-of-type(4) > h3,{}
https://docs.python.org/3/tutorial/index.html,code,code,content,content,False,True,True,if,section#the-python-tutorial > div > ul > li:nth-of-type(4) > ul > li > a > code,{'class': 'xref std std-keyword docutils literal notranslate'}
https://docs.python.org/3/tutorial/index.html,code,code,content,content,False,True,True,for,section#the-python-tutorial > div > ul > li:nth-of-type(4) > ul > li:nth-of-type(2) > a > code,{'class': 'xref std std-keyword docutils literal notranslate'}
https://docs.python.org/3/tutorial/index.html,code,code,content,content,False,True,True,range(),section#the-python-tutorial > div > ul > li:nth-of-type(4) > ul > li:nth-of-type(3) > a > code,{'class': 'xref py py-func docutils literal notranslate'}
https://docs.python.org/3/tutorial/index.html,code,code,content,content,False,True,True,break,section#the-python-tutorial > div > ul > li:nth-of-type(4) > ul > li:nth-of-type(4) > a > code,{'class': 'xref std std-keyword docutils literal notranslate'}
https://docs.python.org/3/tutorial/index.html,code,code,content,content,False,True,True,continue,section#the-python-tutorial > div > ul > li:nth-of-type(4) > ul > li:nth-of-type(4) > a > code:nth-of-type(2),{'class': 'xref std std-keyword docutils literal notranslate'}
https://docs.python.org/3/tutorial/index.html,code,code,content,content,False,True,True,else,section#the-python-tutorial > div > ul > li:nth-of-type(4) > ul > li:nth-of-type(5) > a > code,{'class': 'xref std std-keyword docutils literal notranslate'}
https://docs.python.org/3/tutorial/index.html,code,code,content,content,False,True,True,pass,section#the-python-tutorial > div > ul > li:nth-of-type(4) > ul > li:nth-of-type(6) > a > code,{'class': 'xref std std-keyword docutils literal notranslate'}
https://docs.python.org/3/tutorial/index.html,code,code,content,content,False,True,True,match,section#the-python-tutorial > div > ul > li:nth-of-type(4) > ul > li:nth-of-type(7) > a > code,{'class': 'xref std std-keyword docutils literal notranslate'}
https://docs.python.org/3/tutorial/index.html,code,code,content,content,False,True,True,del,section#the-python-tutorial > div > ul > li:nth-of-type(5) > ul > li:nth-of-type(2) > a > code,{'class': 'xref std std-keyword docutils literal notranslate'}
https://docs.python.org/3/tutorial/index.html,code,code,content,content,False,True,True,dir(),section#the-python-tutorial > div > ul > li:nth-of-type(6) > ul > li:nth-of-type(3) > a > code,{'class': 'xref py py-func docutils literal notranslate'}
https://docs.python.org/3/tutorial/index.html,code,code,content,content,False,True,True,json,section#the-python-tutorial > div > ul > li:nth-of-type(7) > ul > li:nth-of-type(2) > ul > li:nth-of-type(2) > a > code,{'class': 'xref py py-mod docutils literal notranslate'}
https://docs.python.org/3/tutorial/index.html,p,p,content,content,False,True,True,"Python is an easy to learn, powerful programming language. It has efficient high-level data structures and a simple but effective approach to object-oriented programming. Python’s elegant syntax and dynamic typing, together with its interpreted nature, make it an ideal language for scripting and rapid application development in many areas on most platforms.",section#the-python-tutorial > p,{}
https://docs.python.org/3/tutorial/index.html,p,p,content,content,False,True,True,"The Python interpreter and the extensive standard library are freely available in source or binary form for all major platforms from the Python web site, https://www.python.org/, and may be freely distributed. The same site also contains distributions of and pointers to many free third party Python modules, programs and tools, and additional documentation.",section#the-python-tutorial > p:nth-of-type(2),{}
https://docs.python.org/3/tutorial/index.html,p,p,content,content,False,True,True,The Python interpreter is easily extended with new functions and data types implemented in C or C++ (or other languages callable from C). Python is also suitable as an extension language for customizable applications.,section#the-python-tutorial > p:nth-of-type(3),{}
https://docs.python.org/3/tutorial/index.html,p,p,content,content,False,True,True,"This tutorial introduces the reader informally to the basic concepts and features of the Python language and system. It helps to have a Python interpreter handy for hands-on experience, but all examples are self-contained, so the tutorial can be read off-line as well.",section#the-python-tutorial > p:nth-of-type(4),{}
https://docs.python.org/3/tutorial/index.html,p,p,content,content,False,True,True,"For a description of standard objects and modules, see The Python Standard Library. The Python Language Reference gives a more formal definition of the language. To write extensions in C or C++, read Extending and Embedding the Python Interpreter and Python/C API Reference Manual. There are also several books covering Python in depth.",section#the-python-tutorial > p:nth-of-type(5),{}
https://docs.python.org/3/tutorial/index.html,p,p,content,content,False,True,True,"This tutorial does not attempt to be comprehensive and cover every single feature, or even every commonly used feature. Instead, it introduces many of Python’s most noteworthy features, and will give you a good idea of the language’s flavor and style. After reading it, you will be able to read and write Python modules and programs, and you will be ready to learn more about the various Python library modules described in The Python Standard Library.",section#the-python-tutorial > p:nth-of-type(6),{}
https://docs.python.org/3/tutorial/index.html,p,p,content,content,False,True,True,The Glossary is also worth going through.,section#the-python-tutorial > p:nth-of-type(7),{}
