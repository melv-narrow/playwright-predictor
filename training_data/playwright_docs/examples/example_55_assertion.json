{
  "language": "javascript",
  "code": "<div id=\"current-time\" data-testid=\"current-time\"></div>  \n<script>  \n  const renderTime = () => {  \n    document.getElementById('current-time').textContent =  \n        new Date().toLocaleString();  \n  };  \n  setInterval(renderTime, 1000);  \n</script>  \n\n\n\n// Initialize clock with a specific time, let the page load naturally.  \nawait page.clock.install({ time: new Date('2024-02-02T08:00:00') });  \nawait page.goto('http://localhost:3333');  \n  \n// Pause the time flow, stop the timers, you now have manual control  \n// over the page time.  \nawait page.clock.pauseAt(new Date('2024-02-02T10:00:00'));  \nawait expect(page.getByTestId('current-time')).toHaveText('2/2/2024, 10:00:00 AM');  \n  \n// Tick through time manually, firing all timers in the process.  \n// In this case, time will be updated in the screen 2 times.  \nawait page.clock.runFor(2000);  \nawait expect(page.getByTestId('current-time')).toHaveText('2/2/2024, 10:00:02 AM');",
  "context": "Tick through time manually, firing all the timers consistently\u200b | In rare cases, you may want to tick through time manually, firing all timers and animation frames in the process to achieve a fine-grained control over the passage of time.",
  "source_url": "https://playwright.dev/docs/clock",
  "pattern": "assertion"
}