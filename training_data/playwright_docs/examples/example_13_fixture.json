{
  "language": "javascript",
  "code": "import { test, expect } from '@playwright/test';  \n  \nconst REPO = 'test-repo-1';  \nconst USER = 'github-username';  \n  \n// Request context is reused by all tests in the file.  \nlet apiContext;  \n  \ntest.beforeAll(async ({ playwright }) => {  \n  apiContext = await playwright.request.newContext({  \n    // All requests we send go to this API endpoint.  \n    baseURL: 'https://api.github.com',  \n    extraHTTPHeaders: {  \n      // We set this header per GitHub guidelines.  \n      'Accept': 'application/vnd.github.v3+json',  \n      // Add authorization token to all requests.  \n      // Assuming personal access token available in the environment.  \n      'Authorization': `token ${process.env.API_TOKEN}`,  \n    },  \n  });  \n});  \n  \ntest.afterAll(async ({ }) => {  \n  // Dispose all responses.  \n  await apiContext.dispose();  \n});  \n  \ntest('last created issue should be first in the list', async ({ page }) => {  \n  const newIssue = await apiContext.post(`/repos/${USER}/${REPO}/issues`, {  \n    data: {  \n      title: '[Feature] request 1',  \n    }  \n  });  \n  expect(newIssue.ok()).toBeTruthy();  \n  \n  await page.goto(`https://github.com/${USER}/${REPO}/issues`);  \n  const firstIssue = page.locator(`a[data-hovercard-type='issue']`).first();  \n  await expect(firstIssue).toHaveText('[Feature] request 1');  \n});",
  "context": "Establishing preconditions\u200b | The following test creates a new issue via API and then navigates to the list of all issues in the project to check that it appears at the top of the list.",
  "source_url": "https://playwright.dev/docs/api-testing",
  "pattern": "fixture"
}