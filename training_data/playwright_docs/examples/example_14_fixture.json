{
  "language": "javascript",
  "code": "import { test, expect } from '@playwright/test';  \n  \nconst REPO = 'test-repo-1';  \nconst USER = 'github-username';  \n  \n// Request context is reused by all tests in the file.  \nlet apiContext;  \n  \ntest.beforeAll(async ({ playwright }) => {  \n  apiContext = await playwright.request.newContext({  \n    // All requests we send go to this API endpoint.  \n    baseURL: 'https://api.github.com',  \n    extraHTTPHeaders: {  \n      // We set this header per GitHub guidelines.  \n      'Accept': 'application/vnd.github.v3+json',  \n      // Add authorization token to all requests.  \n      // Assuming personal access token available in the environment.  \n      'Authorization': `token ${process.env.API_TOKEN}`,  \n    },  \n  });  \n});  \n  \ntest.afterAll(async ({ }) => {  \n  // Dispose all responses.  \n  await apiContext.dispose();  \n});  \n  \ntest('last created issue should be on the server', async ({ page }) => {  \n  await page.goto(`https://github.com/${USER}/${REPO}/issues`);  \n  await page.getByText('New Issue').click();  \n  await page.getByRole('textbox', { name: 'Title' }).fill('Bug report 1');  \n  await page.getByRole('textbox', { name: 'Comment body' }).fill('Bug description');  \n  await page.getByText('Submit new issue').click();  \n  const issueId = page.url().substr(page.url().lastIndexOf('/'));  \n  \n  const newIssue = await apiContext.get(  \n      `https://api.github.com/repos/${USER}/${REPO}/issues/${issueId}`  \n  );  \n  expect(newIssue.ok()).toBeTruthy();  \n  expect(newIssue.json()).toEqual(expect.objectContaining({  \n    title: 'Bug report 1'  \n  }));  \n});",
  "context": "Validating postconditions\u200b | The following test creates a new issue via user interface in the browser and then uses checks if it was created via API:",
  "source_url": "https://playwright.dev/docs/api-testing",
  "pattern": "fixture"
}