{
  "language": "javascript",
  "code": "// A primitive value.  \nawait page.evaluate(num => num, 42);  \n  \n// An array.  \nawait page.evaluate(array => array.length, [1, 2, 3]);  \n  \n// An object.  \nawait page.evaluate(object => object.foo, { foo: 'bar' });  \n  \n// A single handle.  \nconst button = await page.evaluateHandle('window.button');  \nawait page.evaluate(button => button.textContent, button);  \n  \n// Alternative notation using JSHandle.evaluate.  \nawait button.evaluate((button, from) => button.textContent.substring(from), 5);  \n  \n// Object with multiple handles.  \nconst button1 = await page.evaluateHandle('window.button1');  \nconst button2 = await page.evaluateHandle('window.button2');  \nawait page.evaluate(  \n    o => o.button1.textContent + o.button2.textContent,  \n    { button1, button2 });  \n  \n// Object destructuring works. Note that property names must match  \n// between the destructured object and the argument.  \n// Also note the required parenthesis.  \nawait page.evaluate(  \n    ({ button1, button2 }) => button1.textContent + button2.textContent,  \n    { button1, button2 });  \n  \n// Array works as well. Arbitrary names can be used for destructuring.  \n// Note the required parenthesis.  \nawait page.evaluate(  \n    ([b1, b2]) => b1.textContent + b2.textContent,  \n    [button1, button2]);  \n  \n// Any mix of serializables and handles works.  \nawait page.evaluate(  \n    x => x.button1.textContent + x.list[0].textContent + String(x.foo),  \n    { button1, list: [button2], foo: null });",
  "context": "Evaluation Argument\u200b | Playwright evaluation methods like [page.evaluate()](/docs/api/class-page#page-evaluate) take a single optional argument. This argument can be a mix of [Serializable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description \"Serializable\") values and [JSHandle](/docs/api/class-jshandle \"JSHandle\") instances. Handles are automatically converted to the value they represent.",
  "source_url": "https://playwright.dev/docs/evaluating",
  "pattern": "wait_strategy"
}