{
  "language": "javascript",
  "code": "import { test as base } from '@playwright/test';  \n  \ntype Account = {  \n  username: string;  \n  password: string;  \n};  \n  \n// Note that we pass worker fixture types as a second template parameter.  \nexport const test = base.extend<{}, { account: Account }>({  \n  account: [async ({ browser }, use, workerInfo) => {  \n    // Unique username.  \n    const username = 'user' + workerInfo.workerIndex;  \n    const password = 'verysecure';  \n  \n    // Create the account with Playwright.  \n    const page = await browser.newPage();  \n    await page.goto('/signup');  \n    await page.getByLabel('User Name').fill(username);  \n    await page.getByLabel('Password').fill(password);  \n    await page.getByText('Sign up').click();  \n    // Make sure everything is ok.  \n    await expect(page.getByTestId('result')).toHaveText('Success');  \n    // Do not forget to cleanup.  \n    await page.close();  \n  \n    // Use the account value.  \n    await use({ username, password });  \n  }, { scope: 'worker' }],  \n  \n  page: async ({ page, account }, use) => {  \n    // Sign in with our account.  \n    const { username, password } = account;  \n    await page.goto('/signin');  \n    await page.getByLabel('User Name').fill(username);  \n    await page.getByLabel('Password').fill(password);  \n    await page.getByText('Sign in').click();  \n    await expect(page.getByTestId('userinfo')).toHaveText(username);  \n  \n    // Use signed-in page in the test.  \n    await use(page);  \n  },  \n});  \nexport { expect } from '@playwright/test';",
  "context": "Below we'll create an `account` fixture that will be shared by all tests in the same worker, and override the `page` fixture to login into this account for each test. To generate unique accounts, we'll use the [workerInfo.workerIndex](/docs/api/class-workerinfo#worker-info-worker-index) that is available to any test or fixture. Note the tuple-like syntax for the worker fixture - we have to pass `{scope: 'worker'}` so that test runner sets up this fixture once per worker. | my-test.ts",
  "source_url": "https://playwright.dev/docs/test-fixtures",
  "pattern": "fixture"
}