{
  "language": "javascript",
  "code": "import { test as base, type Page, type Locator } from '@playwright/test';  \n  \n// Page Object Model for the \"admin\" page.  \n// Here you can add locators and helper methods specific to the admin page.  \nclass AdminPage {  \n  // Page signed in as \"admin\".  \n  page: Page;  \n  \n  // Example locator pointing to \"Welcome, Admin\" greeting.  \n  greeting: Locator;  \n  \n  constructor(page: Page) {  \n    this.page = page;  \n    this.greeting = page.locator('#greeting');  \n  }  \n}  \n  \n// Page Object Model for the \"user\" page.  \n// Here you can add locators and helper methods specific to the user page.  \nclass UserPage {  \n  // Page signed in as \"user\".  \n  page: Page;  \n  \n  // Example locator pointing to \"Welcome, User\" greeting.  \n  greeting: Locator;  \n  \n  constructor(page: Page) {  \n    this.page = page;  \n    this.greeting = page.locator('#greeting');  \n  }  \n}  \n  \n// Declare the types of your fixtures.  \ntype MyFixtures = {  \n  adminPage: AdminPage;  \n  userPage: UserPage;  \n};  \n  \nexport * from '@playwright/test';  \nexport const test = base.extend<MyFixtures>({  \n  adminPage: async ({ browser }, use) => {  \n    const context = await browser.newContext({ storageState: 'playwright/.auth/admin.json' });  \n    const adminPage = new AdminPage(await context.newPage());  \n    await use(adminPage);  \n    await context.close();  \n  },  \n  userPage: async ({ browser }, use) => {  \n    const context = await browser.newContext({ storageState: 'playwright/.auth/user.json' });  \n    const userPage = new UserPage(await context.newPage());  \n    await use(userPage);  \n    await context.close();  \n  },  \n});",
  "context": "Below is an example that [creates fixtures](/docs/test-fixtures#creating-a-fixture) for two [Page Object Models](/docs/pom) \\- admin POM and user POM. It assumes `adminStorageState.json` and `userStorageState.json` files were created in the global setup. | playwright/fixtures.ts",
  "source_url": "https://playwright.dev/docs/auth",
  "pattern": "page_object"
}