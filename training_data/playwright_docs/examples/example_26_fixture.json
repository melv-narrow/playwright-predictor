{
  "language": "javascript",
  "code": "import { test as baseTest, expect } from '@playwright/test';  \nimport fs from 'fs';  \nimport path from 'path';  \n  \nexport * from '@playwright/test';  \nexport const test = baseTest.extend<{}, { workerStorageState: string }>({  \n  // Use the same storage state for all tests in this worker.  \n  storageState: ({ workerStorageState }, use) => use(workerStorageState),  \n  \n  // Authenticate once per worker with a worker-scoped fixture.  \n  workerStorageState: [async ({ browser }, use) => {  \n    // Use parallelIndex as a unique identifier for each worker.  \n    const id = test.info().parallelIndex;  \n    const fileName = path.resolve(test.info().project.outputDir, `.auth/${id}.json`);  \n  \n    if (fs.existsSync(fileName)) {  \n      // Reuse existing authentication state if any.  \n      await use(fileName);  \n      return;  \n    }  \n  \n    // Important: make sure we authenticate in a clean environment by unsetting storage state.  \n    const page = await browser.newPage({ storageState: undefined });  \n  \n    // Acquire a unique account, for example create a new one.  \n    // Alternatively, you can have a list of precreated accounts for testing.  \n    // Make sure that accounts are unique, so that multiple team members  \n    // can run tests at the same time without interference.  \n    const account = await acquireAccount(id);  \n  \n    // Perform authentication steps. Replace these actions with your own.  \n    await page.goto('https://github.com/login');  \n    await page.getByLabel('Username or email address').fill(account.username);  \n    await page.getByLabel('Password').fill(account.password);  \n    await page.getByRole('button', { name: 'Sign in' }).click();  \n    // Wait until the page receives the cookies.  \n    //  \n    // Sometimes login flow sets cookies in the process of several redirects.  \n    // Wait for the final URL to ensure that the cookies are actually set.  \n    await page.waitForURL('https://github.com/');  \n    // Alternatively, you can wait until the page reaches a state where all cookies are set.  \n    await expect(page.getByRole('button', { name: 'View profile and more' })).toBeVisible();  \n  \n    // End of authentication steps.  \n  \n    await page.context().storageState({ path: fileName });  \n    await page.close();  \n    await use(fileName);  \n  }, { scope: 'worker' }],  \n});",
  "context": "Create `playwright/fixtures.ts` file that will [override `storageState` fixture](/docs/test-fixtures#overriding-fixtures) to authenticate once per worker. Use [testInfo.parallelIndex](/docs/api/class-testinfo#test-info-parallel-index) to differentiate between workers. | playwright/fixtures.ts",
  "source_url": "https://playwright.dev/docs/auth",
  "pattern": "fixture"
}