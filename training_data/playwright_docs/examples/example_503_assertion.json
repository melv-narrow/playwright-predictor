{
  "language": "javascript",
  "code": "import { test as base } from '@playwright/test';  \nimport fs from 'fs';  \nimport os from 'os';  \nimport path from 'path';  \nimport childProcess from 'child_process';  \n  \nconst EXECUTABLE_PATH = path.join(  \n    __dirname,  \n    '../../webview2-app/bin/Debug/net8.0-windows/webview2.exe',  \n);  \n  \nexport const test = base.extend({  \n  browser: async ({ playwright }, use, testInfo) => {  \n    const cdpPort = 10000 + testInfo.workerIndex;  \n    // Make sure that the executable exists and is executable  \n    fs.accessSync(EXECUTABLE_PATH, fs.constants.X_OK);  \n    const userDataDir = path.join(  \n        fs.realpathSync.native(os.tmpdir()),  \n        `playwright-webview2-tests/user-data-dir-${testInfo.workerIndex}`,  \n    );  \n    const webView2Process = childProcess.spawn(EXECUTABLE_PATH, [], {  \n      shell: true,  \n      env: {  \n        ...process.env,  \n        WEBVIEW2_ADDITIONAL_BROWSER_ARGUMENTS: `--remote-debugging-port=${cdpPort}`,  \n        WEBVIEW2_USER_DATA_FOLDER: userDataDir,  \n      }  \n    });  \n    await new Promise<void>(resolve => webView2Process.stdout.on('data', data => {  \n      if (data.toString().includes('WebView2 initialized'))  \n        resolve();  \n    }));  \n    const browser = await playwright.chromium.connectOverCDP(`http://127.0.0.1:${cdpPort}`);  \n    await use(browser);  \n    await browser.close();  \n    childProcess.execSync(`taskkill /pid ${webView2Process.pid} /T /F`);  \n    fs.rmdirSync(userDataDir, { recursive: true });  \n  },  \n  context: async ({ browser }, use) => {  \n    const context = browser.contexts()[0];  \n    await use(context);  \n  },  \n  page: async ({ context }, use) => {  \n    const page = context.pages()[0];  \n    await use(page);  \n  },  \n});  \n  \nexport { expect } from '@playwright/test';",
  "context": "Using the following, Playwright will run your WebView2 application as a sub-process, assign a unique user data directory to it and provide the [Page](/docs/api/class-page \"Page\") instance to your test: | webView2Test.ts",
  "source_url": "https://playwright.dev/docs/webview2",
  "pattern": "assertion"
}