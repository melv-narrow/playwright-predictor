{
  "language": "javascript",
  "code": "const REPO = 'test-repo-1';  \nconst USER = 'github-username';  \n  \ntest('should create a bug report', async ({ request }) => {  \n  const newIssue = await request.post(`/repos/${USER}/${REPO}/issues`, {  \n    data: {  \n      title: '[Bug] report 1',  \n      body: 'Bug description',  \n    }  \n  });  \n  expect(newIssue.ok()).toBeTruthy();  \n  \n  const issues = await request.get(`/repos/${USER}/${REPO}/issues`);  \n  expect(issues.ok()).toBeTruthy();  \n  expect(await issues.json()).toContainEqual(expect.objectContaining({  \n    title: '[Bug] report 1',  \n    body: 'Bug description'  \n  }));  \n});  \n  \ntest('should create a feature request', async ({ request }) => {  \n  const newIssue = await request.post(`/repos/${USER}/${REPO}/issues`, {  \n    data: {  \n      title: '[Feature] request 1',  \n      body: 'Feature description',  \n    }  \n  });  \n  expect(newIssue.ok()).toBeTruthy();  \n  \n  const issues = await request.get(`/repos/${USER}/${REPO}/issues`);  \n  expect(issues.ok()).toBeTruthy();  \n  expect(await issues.json()).toContainEqual(expect.objectContaining({  \n    title: '[Feature] request 1',  \n    body: 'Feature description'  \n  }));  \n});",
  "context": "Playwright Test comes with the built-in `request` fixture that respects configuration options like `baseURL` or `extraHTTPHeaders` we specified and is ready to send some requests. | Now we can add a few tests that will create new issues in the repository.",
  "source_url": "https://playwright.dev/docs/api-testing",
  "pattern": "assertion"
}