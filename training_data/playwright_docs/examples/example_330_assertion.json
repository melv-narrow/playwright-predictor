{
  "language": "javascript",
  "code": "import { expect as baseExpect } from '@playwright/test';  \nimport type { Page, Locator } from '@playwright/test';  \n  \nexport { test } from '@playwright/test';  \n  \nexport const expect = baseExpect.extend({  \n  async toHaveAmount(locator: Locator, expected: number, options?: { timeout?: number }) {  \n    const assertionName = 'toHaveAmount';  \n    let pass: boolean;  \n    let matcherResult: any;  \n    try {  \n      await baseExpect(locator).toHaveAttribute('data-amount', String(expected), options);  \n      pass = true;  \n    } catch (e: any) {  \n      matcherResult = e.matcherResult;  \n      pass = false;  \n    }  \n  \n    const message = pass  \n      ? () => this.utils.matcherHint(assertionName, undefined, undefined, { isNot: this.isNot }) +  \n          '\\n\\n' +  \n          `Locator: ${locator}\\n` +  \n          `Expected: not ${this.utils.printExpected(expected)}\\n` +  \n          (matcherResult ? `Received: ${this.utils.printReceived(matcherResult.actual)}` : '')  \n      : () =>  this.utils.matcherHint(assertionName, undefined, undefined, { isNot: this.isNot }) +  \n          '\\n\\n' +  \n          `Locator: ${locator}\\n` +  \n          `Expected: ${this.utils.printExpected(expected)}\\n` +  \n          (matcherResult ? `Received: ${this.utils.printReceived(matcherResult.actual)}` : '');  \n  \n    return {  \n      message,  \n      pass,  \n      name: assertionName,  \n      expected,  \n      actual: matcherResult?.actual,  \n    };  \n  },  \n});",
  "context": "In this example we add a custom `toHaveAmount` function. Custom matcher should return a `pass` flag indicating whether the assertion passed, and a `message` callback that's used when the assertion fails. | fixtures.ts",
  "source_url": "https://playwright.dev/docs/test-assertions",
  "pattern": "assertion"
}