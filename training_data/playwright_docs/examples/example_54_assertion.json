{
  "language": "javascript",
  "code": "<div id=\"remaining-time\" data-testid=\"remaining-time\"></div>  \n<script>  \n  const endTime = Date.now() + 5 * 60_000;  \n  const renderTime = () => {  \n    const diffInSeconds = Math.round((endTime - Date.now()) / 1000);  \n    if (diffInSeconds <= 0) {  \n      document.getElementById('remaining-time').textContent =  \n        'You have been logged out due to inactivity.';  \n    } else {  \n      document.getElementById('remaining-time').textContent =  \n        `You will be logged out in ${diffInSeconds} seconds.`;  \n    }  \n    setTimeout(renderTime, 1000);  \n  };  \n  renderTime();  \n</script>  \n<button type=\"button\">Interaction</button>  \n\n\n\n// Initial time does not matter for the test, so we can pick current time.  \nawait page.clock.install();  \nawait page.goto('http://localhost:3333');  \n// Interact with the page  \nawait page.getByRole('button').click();  \n  \n// Fast forward time 5 minutes as if the user did not do anything.  \n// Fast forward is like closing the laptop lid and opening it after 5 minutes.  \n// All the timers due will fire once immediately, as in the real browser.  \nawait page.clock.fastForward('05:00');  \n  \n// Check that the user was logged out automatically.  \nawait expect(page.getByText('You have been logged out due to inactivity.')).toBeVisible();",
  "context": "Test inactivity monitoring\u200b | Inactivity monitoring is a common feature in web applications that logs out users after a period of inactivity. Testing this feature can be tricky because you need to wait for a long time to see the effect. With the help of the clock, you can speed up time and test this feature quickly.",
  "source_url": "https://playwright.dev/docs/clock",
  "pattern": "assertion"
}